{"version":3,"file":"utils.js","names":["getServerUrlBrowser","url","scheme","port","test","window","location","protocol","hostname","getServerUrlNode","getWebSocket","protocols","ws","headers","requestOptions","parsedUrl","isNode","WebSocket","MozWebSocket","getNewPromise","promise","Promise","resolve","reject","onSuccess","onError"],"sources":["../src/utils.js"],"sourcesContent":["import { isNode } from './constants.js';\n\nexport function getServerUrlBrowser (url) {\n    let scheme, port;\n\n    if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n        return url;\n    }\n\n    scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n\n    if (!url) {\n        port = window.location.port !== '' ? ':' + window.location.port : '';\n        return scheme + window.location.hostname + port + '/ws';\n    } else if (url[0] === '/') {    // just path on current server\n        port = window.location.port !== '' ? ':' + window.location.port : '';\n        return scheme + window.location.hostname + port + url;\n    } else {    // assuming just domain+path\n        return scheme + url;\n    }\n}\n\nexport function getServerUrlNode (url) {\n    if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n        return url;\n    } else {\n        return null;\n    }\n}\n\nexport function getWebSocket (url, protocols, ws, headers, requestOptions) {\n    const parsedUrl = isNode ? getServerUrlNode(url) : getServerUrlBrowser(url);\n\n    if (!parsedUrl) {\n        return null;\n    }\n\n    if (ws) {   // User provided webSocket class\n        return new ws(parsedUrl, protocols, null, headers, requestOptions);\n    } else if (isNode) {    // we're in node, but no webSocket provided\n        return null;\n    } else if ('WebSocket' in window) {\n        // Chrome, MSIE, newer Firefox\n        return new window.WebSocket(parsedUrl, protocols);\n    } else if ('MozWebSocket' in window) {\n        // older versions of Firefox\n        return new window.MozWebSocket(parsedUrl, protocols);\n    }\n\n    return null;\n}\n\nexport function getNewPromise () {\n    let promise = {};\n\n    promise.promise = new Promise(function (resolve, reject) {\n        promise.onSuccess = resolve;\n        promise.onError = reject;\n    });\n\n    return promise;\n}\n"],"mappings":";;;;;;;;;;AAAA;;AAEO,SAASA,mBAAT,CAA8BC,GAA9B,EAAmC;EACtC,IAAIC,MAAJ,EAAYC,IAAZ;;EAEA,IAAI,eAAeC,IAAf,CAAoBH,GAApB,CAAJ,EAA8B;IAAI;IAC9B,OAAOA,GAAP;EACH;;EAEDC,MAAM,GAAGG,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,QAA7B,GAAwC,QAAxC,GAAmD,OAA5D;;EAEA,IAAI,CAACN,GAAL,EAAU;IACNE,IAAI,GAAGE,MAAM,CAACC,QAAP,CAAgBH,IAAhB,KAAyB,EAAzB,GAA8B,MAAME,MAAM,CAACC,QAAP,CAAgBH,IAApD,GAA2D,EAAlE;IACA,OAAOD,MAAM,GAAGG,MAAM,CAACC,QAAP,CAAgBE,QAAzB,GAAoCL,IAApC,GAA2C,KAAlD;EACH,CAHD,MAGO,IAAIF,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;IAAK;IAC5BE,IAAI,GAAGE,MAAM,CAACC,QAAP,CAAgBH,IAAhB,KAAyB,EAAzB,GAA8B,MAAME,MAAM,CAACC,QAAP,CAAgBH,IAApD,GAA2D,EAAlE;IACA,OAAOD,MAAM,GAAGG,MAAM,CAACC,QAAP,CAAgBE,QAAzB,GAAoCL,IAApC,GAA2CF,GAAlD;EACH,CAHM,MAGA;IAAK;IACR,OAAOC,MAAM,GAAGD,GAAhB;EACH;AACJ;;AAEM,SAASQ,gBAAT,CAA2BR,GAA3B,EAAgC;EACnC,IAAI,eAAeG,IAAf,CAAoBH,GAApB,CAAJ,EAA8B;IAAI;IAC9B,OAAOA,GAAP;EACH,CAFD,MAEO;IACH,OAAO,IAAP;EACH;AACJ;;AAEM,SAASS,YAAT,CAAuBT,GAAvB,EAA4BU,SAA5B,EAAuCC,EAAvC,EAA2CC,OAA3C,EAAoDC,cAApD,EAAoE;EACvE,IAAMC,SAAS,GAAGC,iBAAA,GAASP,gBAAgB,CAACR,GAAD,CAAzB,GAAiCD,mBAAmB,CAACC,GAAD,CAAtE;;EAEA,IAAI,CAACc,SAAL,EAAgB;IACZ,OAAO,IAAP;EACH;;EAED,IAAIH,EAAJ,EAAQ;IAAI;IACR,OAAO,IAAIA,EAAJ,CAAOG,SAAP,EAAkBJ,SAAlB,EAA6B,IAA7B,EAAmCE,OAAnC,EAA4CC,cAA5C,CAAP;EACH,CAFD,MAEO,IAAIE,iBAAJ,EAAY;IAAK;IACpB,OAAO,IAAP;EACH,CAFM,MAEA,IAAI,eAAeX,MAAnB,EAA2B;IAC9B;IACA,OAAO,IAAIA,MAAM,CAACY,SAAX,CAAqBF,SAArB,EAAgCJ,SAAhC,CAAP;EACH,CAHM,MAGA,IAAI,kBAAkBN,MAAtB,EAA8B;IACjC;IACA,OAAO,IAAIA,MAAM,CAACa,YAAX,CAAwBH,SAAxB,EAAmCJ,SAAnC,CAAP;EACH;;EAED,OAAO,IAAP;AACH;;AAEM,SAASQ,aAAT,GAA0B;EAC7B,IAAIC,OAAO,GAAG,EAAd;EAEAA,OAAO,CAACA,OAAR,GAAkB,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;IACrDH,OAAO,CAACI,SAAR,GAAoBF,OAApB;IACAF,OAAO,CAACK,OAAR,GAAkBF,MAAlB;EACH,CAHiB,CAAlB;EAKA,OAAOH,OAAP;AACH"}
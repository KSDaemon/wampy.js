{"version":3,"sources":["../src/utils.js"],"names":["getWebSocket","isBinaryTypeAllowed","getServerUrlBrowser","url","scheme","port","test","window","location","protocol","hostname","getServerUrlNode","protocols","ws","parsedUrl","isNode","WebSocket","MozWebSocket","type","ALLOWED_BINARY_TYPES","indexOf"],"mappings":";;;;;QA8BgBA,Y,GAAAA,Y;QAsBAC,mB,GAAAA,mB;;AApDhB;;AAEA,SAASC,mBAAT,CAA8BC,GAA9B,EAAmC;AAC/B,QAAIC,eAAJ;AAAA,QAAYC,aAAZ;;AAEA,QAAI,eAAeC,IAAf,CAAoBH,GAApB,CAAJ,EAA8B;AAAI;AAC9B,eAAOA,GAAP;AACH;;AAEDC,aAASG,OAAOC,QAAP,CAAgBC,QAAhB,KAA6B,QAA7B,GAAwC,QAAxC,GAAmD,OAA5D;;AAEA,QAAI,CAACN,GAAL,EAAU;AACNE,eAAOE,OAAOC,QAAP,CAAgBH,IAAhB,KAAyB,EAAzB,GAA8B,MAAME,OAAOC,QAAP,CAAgBH,IAApD,GAA2D,EAAlE;AACA,eAAOD,SAASG,OAAOC,QAAP,CAAgBE,QAAzB,GAAoCL,IAApC,GAA2C,KAAlD;AACH,KAHD,MAGO,IAAIF,IAAI,CAAJ,MAAW,GAAf,EAAoB;AAAK;AAC5BE,eAAOE,OAAOC,QAAP,CAAgBH,IAAhB,KAAyB,EAAzB,GAA8B,MAAME,OAAOC,QAAP,CAAgBH,IAApD,GAA2D,EAAlE;AACA,eAAOD,SAASG,OAAOC,QAAP,CAAgBE,QAAzB,GAAoCL,IAApC,GAA2CF,GAAlD;AACH,KAHM,MAGA;AAAK;AACR,eAAOC,SAASD,GAAhB;AACH;AACJ;;AAED,SAASQ,gBAAT,CAA2BR,GAA3B,EAAgC;AAC5B,QAAI,eAAeG,IAAf,CAAoBH,GAApB,CAAJ,EAA8B;AAAI;AAC9B,eAAOA,GAAP;AACH,KAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ;;AAEM,SAASH,YAAT,CAAuBG,GAAvB,EAA4BS,SAA5B,EAAuCC,EAAvC,EAA2C;AAC9C,QAAMC,YAAYC,oBAASJ,iBAAiBR,GAAjB,CAAT,GAAiCD,oBAAoBC,GAApB,CAAnD;;AAEA,QAAI,CAACW,SAAL,EAAgB;AACZ,eAAO,IAAP;AACH;;AAED,QAAID,EAAJ,EAAQ;AAAI;AACR,eAAO,IAAIA,EAAJ,CAAOC,SAAP,EAAkBF,SAAlB,CAAP;AACH,KAFD,MAEO,IAAIG,iBAAJ,EAAY;AAAK;AACpB,eAAO,IAAP;AACH,KAFM,MAEA,IAAI,eAAeR,MAAnB,EAA2B;AAC9B;AACA,eAAO,IAAIA,OAAOS,SAAX,CAAqBF,SAArB,EAAgCF,SAAhC,CAAP;AACH,KAHM,MAGA,IAAI,kBAAkBL,MAAtB,EAA8B;AACjC;AACA,eAAO,IAAIA,OAAOU,YAAX,CAAwBH,SAAxB,EAAmCF,SAAnC,CAAP;AACH;;AAED,WAAO,IAAP;AACH;;AAEM,SAASX,mBAAT,CAA8BiB,IAA9B,EAAoC;AACvC,WAAOC,gCAAqBC,OAArB,CAA6BF,IAA7B,MAAuC,CAAC,CAA/C;AACH","file":"utils.js","sourcesContent":["import { isNode, ALLOWED_BINARY_TYPES } from './constants';\n\nfunction getServerUrlBrowser (url) {\n    let scheme, port;\n\n    if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n        return url;\n    }\n\n    scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n\n    if (!url) {\n        port = window.location.port !== '' ? ':' + window.location.port : '';\n        return scheme + window.location.hostname + port + '/ws';\n    } else if (url[0] === '/') {    // just path on current server\n        port = window.location.port !== '' ? ':' + window.location.port : '';\n        return scheme + window.location.hostname + port + url;\n    } else {    // domain\n        return scheme + url;\n    }\n}\n\nfunction getServerUrlNode (url) {\n    if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n        return url;\n    } else {\n        return null;\n    }\n}\n\nexport function getWebSocket (url, protocols, ws) {\n    const parsedUrl = isNode ? getServerUrlNode(url) : getServerUrlBrowser(url);\n\n    if (!parsedUrl) {\n        return null;\n    }\n\n    if (ws) {   // User provided webSocket class\n        return new ws(parsedUrl, protocols);\n    } else if (isNode) {    // we're in node, but no webSocket provided\n        return null;\n    } else if ('WebSocket' in window) {\n        // Chrome, MSIE, newer Firefox\n        return new window.WebSocket(parsedUrl, protocols);\n    } else if ('MozWebSocket' in window) {\n        // older versions of Firefox\n        return new window.MozWebSocket(parsedUrl, protocols);\n    }\n\n    return null;\n}\n\nexport function isBinaryTypeAllowed (type) {\n    return ALLOWED_BINARY_TYPES.indexOf(type) !== -1;\n}\n"]}
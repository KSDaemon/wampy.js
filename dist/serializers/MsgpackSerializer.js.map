{"version":3,"file":"MsgpackSerializer.js","names":["msgpack","msgpack5","MsgpackSerializer","protocol","isBinary","data","encode","Promise","resolve","type","constructor","name","decode","Uint8Array","reader","FileReader","onload","result","readAsArrayBuffer"],"sources":["../../src/serializers/MsgpackSerializer.js"],"sourcesContent":["import msgpack5 from 'msgpack5';\n\nconst msgpack = msgpack5();\n\nexport class MsgpackSerializer {\n    constructor () {\n        this.protocol = 'msgpack';\n        this.isBinary = true;\n    }\n\n    encode (data) {\n        return msgpack.encode(data);\n    }\n\n    decode (data) {\n        return new Promise(resolve => {\n\n            const type = data.constructor.name;\n\n            if (type === 'ArrayBuffer' || type === 'Buffer') {\n                resolve(msgpack.decode(new Uint8Array(data)));\n            } else {\n                const reader = new FileReader();\n\n                reader.onload = function () {\n                    resolve(msgpack.decode(new Uint8Array(this.result)));\n                };\n\n                reader.readAsArrayBuffer(data);\n            }\n\n        });\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,IAAAC,mBAAA,GAAhB;;IAEaC,iB;EACT,6BAAe;IAAA;;IACX,KAAKC,QAAL,GAAgB,SAAhB;IACA,KAAKC,QAAL,GAAgB,IAAhB;EACH;;;;WAED,gBAAQC,IAAR,EAAc;MACV,OAAOL,OAAO,CAACM,MAAR,CAAeD,IAAf,CAAP;IACH;;;WAED,gBAAQA,IAAR,EAAc;MACV,OAAO,IAAIE,OAAJ,CAAY,UAAAC,OAAO,EAAI;QAE1B,IAAMC,IAAI,GAAGJ,IAAI,CAACK,WAAL,CAAiBC,IAA9B;;QAEA,IAAIF,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,QAAvC,EAAiD;UAC7CD,OAAO,CAACR,OAAO,CAACY,MAAR,CAAe,IAAIC,UAAJ,CAAeR,IAAf,CAAf,CAAD,CAAP;QACH,CAFD,MAEO;UACH,IAAMS,MAAM,GAAG,IAAIC,UAAJ,EAAf;;UAEAD,MAAM,CAACE,MAAP,GAAgB,YAAY;YACxBR,OAAO,CAACR,OAAO,CAACY,MAAR,CAAe,IAAIC,UAAJ,CAAe,KAAKI,MAApB,CAAf,CAAD,CAAP;UACH,CAFD;;UAIAH,MAAM,CAACI,iBAAP,CAAyBb,IAAzB;QACH;MAEJ,CAhBM,CAAP;IAiBH"}
{"version":3,"file":"wampy.js","names":["jsonSerializer","JsonSerializer","Wampy","url","options","version","_url","_protocols","_wamp_features","agent","roles","publisher","features","subscriber_blackwhite_listing","publisher_exclusion","publisher_identification","payload_passthru_mode","subscriber","pattern_based_subscription","publication_trustlevels","caller","caller_identification","progressive_call_results","call_canceling","call_timeout","callee","call_trustlevels","pattern_based_registration","shared_registration","_cache","sessionId","reqId","server_wamp_features","isSayingGoodbye","opStatus","code","error","timer","reconnectingAttempts","connectPromise","closePromise","_ws","_wsQueue","_requests","_calls","_subscriptions","_subsTopics","Set","_rpcRegs","_rpcNames","_options","debug","logger","autoReconnect","reconnectInterval","maxRetries","realm","helloCustomDetails","uriValidation","authid","authmethods","authextra","authPlugins","authMode","onChallenge","onClose","onError","onReconnect","onReconnectSuccess","ws","additionalHeaders","wsRequestOptions","serializer","payloadSerializers","json","_isPlainObject","_merge","args","console","log","obj","l","length","i","attr","Array","isArray","_isObject","ctor","constructor","prot","prototype","Object","hasOwnProperty","call","toString","protocol","err","topicType","role","Errors","NoDealerError","NoBrokerError","_fillOpStatusByError","_validateURI","topic","patternBased","allowWAMP","UriError","feature","_checkRouterFeature","PPTNotSupportedError","ppt_scheme","search","PPTInvalidSchemeError","E2EE_SERIALIZERS","includes","ppt_serializer","PPTSerializerInvalidError","uri","reBase","rePattern","re","test","indexOf","payload","payloadItems","argsList","argsDict","_isArray","binPayload","pptPayload","kwargs","pptSerializer","encode","e","PPTSerializationError","push","_checkPPTOptions","decode","decodedPayload","msg","_hardClose","errorUri","details","_log","_send","WAMP_MSG_SPEC","ABORT","message","ProtocolViolationError","close","_encode","readyState","send","shift","SUCCESS","onopen","_wsOnOpen","onclose","event","_wsOnClose","onmessage","_wsOnMessage","onerror","_wsOnError","serverProtocol","split","NoSerializerAvailableError","isBinary","binaryType","HELLO","setTimeout","_wsReconnect","onSuccess","_resetState","_decode","data","self","WELCOME","CHALLENGE","GOODBYE","ERROR","SUBSCRIBED","UNSUBSCRIBED","PUBLISHED","EVENT","RESULT","REGISTERED","UNREGISTERED","INVOCATION","_renewSubscriptions","_renewRegistrations","AbortError","p","Promise","resolve","reject","NoCRACallbackOrIdError","then","key","AUTHENTICATE","ChallengeExceptionError","SUBSCRIBE","UNSUBSCRIBE","PUBLISH","REGISTER","UNREGISTER","CALL","callbacks","SubscribeError","UnsubscribeError","PublishError","RegisterError","UnregisterError","CallError","id","onEvent","advancedOptions","add","requestId","subscriptionId","has","publicationId","_unpackPPTPayload","progress","onProgress","rpc","registrationId","invoke_error_handler","invoke_result_handler","results","YIELD","pptScheme","ppt_cipher","ppt_keyid","res","_packPPTPayload","concat","result_handler","error_handler","WAMP_ERROR_MSG","NON_EXIST_RPC_INVOCATION","WebsocketError","getWebSocket","_initWsCallbacks","subs","st","subscribe","rpcs","rn","rpcName","register","opts","authOpts","keys","_setWsProtocols","NoWsOrUrlError","NoRealmError","defer","getNewPromise","promise","topicURI","match","InvalidParamError","_preReqChecks","NoCallbackError","_getReqId","splice","NonExistUnsubscribeError","acknowledge","_optionsConvertHelper","option","sourceType","exclude_me","disclose_me","progress_callback","receive_progress","timeout","NonExistRPCReqIdError","mode","CANCEL","invoke","RPCAlreadyRegisteredError","NonExistRPCUnregistrationError"],"sources":["../src/wampy.js"],"sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\nimport { WAMP_MSG_SPEC, WAMP_ERROR_MSG, E2EE_SERIALIZERS, SUCCESS } from './constants.js';\nimport * as Errors from './errors.js';\nimport { getWebSocket, getNewPromise } from './utils.js';\nimport { JsonSerializer } from './serializers/JsonSerializer.js';\nconst jsonSerializer = new JsonSerializer();\n\n/**\n * WAMP Client Class\n */\nclass Wampy {\n\n    /**\n     * Wampy constructor\n     * @param {string} [url]\n     * @param {Object} [options]\n     */\n    constructor (url, options) {\n\n        /**\n         * Wampy version\n         * @type {string}\n         * @private\n         */\n        this.version = 'v7.0.0-rc2';\n\n        /**\n         * WS Url\n         * @type {string}\n         * @private\n         */\n        this._url = (typeof url === 'string') ? url : null;\n\n        /**\n         * WS protocols\n         * @type {Array}\n         * @private\n         */\n        this._protocols = ['wamp.2.json'];\n\n        /**\n         * WAMP features, supported by Wampy\n         * @type {object}\n         * @private\n         */\n        this._wamp_features = {\n            agent: 'Wampy.js ' + this.version,\n            roles: {\n                publisher : {\n                    features: {\n                        subscriber_blackwhite_listing: true,\n                        publisher_exclusion          : true,\n                        publisher_identification     : true,\n                        payload_passthru_mode        : true\n                    }\n                },\n                subscriber: {\n                    features: {\n                        pattern_based_subscription: true,\n                        publication_trustlevels   : true,\n                        publisher_identification  : true,\n                        payload_passthru_mode     : true\n                    }\n                },\n                caller    : {\n                    features: {\n                        caller_identification   : true,\n                        progressive_call_results: true,\n                        call_canceling          : true,\n                        call_timeout            : true,\n                        payload_passthru_mode   : true\n                    }\n                },\n                callee    : {\n                    features: {\n                        caller_identification     : true,\n                        call_trustlevels          : true,\n                        pattern_based_registration: true,\n                        shared_registration       : true,\n                        payload_passthru_mode     : true\n\n                    }\n                }\n            }\n        };\n\n        /**\n         * Internal cache for object lifetime\n         * @type {Object}\n         * @private\n         */\n        this._cache = {\n            /**\n             * WAMP Session ID\n             * @type {string|null}\n             */\n            sessionId: null,\n\n            /**\n             * WAMP Session scope requests ID\n             * @type {int}\n             */\n            reqId: 0,\n\n            /**\n             * Server WAMP roles and features\n             */\n            server_wamp_features: { roles: {} },\n\n            /**\n             * Are we in state of saying goodbye\n             * @type {boolean}\n             */\n            isSayingGoodbye: false,\n\n            /**\n             * Status of last operation\n             */\n            opStatus: {\n\n                /**\n                 * Int code of last operation\n                 * @type {int}\n                 */\n                code: 0,\n\n                /**\n                 * Error of last operation (if not was successful)\n                 * @type {Error}\n                 */\n                error: null,\n\n                /**\n                 * Request ID of last successfully sent operation\n                 * @type {int}\n                 */\n                reqId: 0\n            },\n\n            /**\n             * Timer for reconnection\n             * @type {int|null}\n             */\n            timer: null,\n\n            /**\n             * Reconnection attempts\n             * @type {number}\n             */\n            reconnectingAttempts: 0,\n\n            /**\n             * Promise for onConnect\n             */\n            connectPromise: null,\n\n            /**\n             * Promise for onClose\n             */\n            closePromise: null\n        };\n\n        /**\n         * WebSocket object\n         * @type {WebSocket}\n         * @private\n         */\n        this._ws = null;\n\n        /**\n         * Internal queue for websocket requests, for case of disconnect\n         * @type {Array}\n         * @private\n         */\n        this._wsQueue = [];\n\n        /**\n         * Internal queue for wamp requests\n         * @type {object}\n         * @private\n         */\n        this._requests = {};\n\n        /**\n         * Stored RPC\n         * @type {object}\n         * @private\n         */\n        this._calls = {};\n\n        /**\n         * Stored Pub/Sub\n         * @type {object}\n         * @private\n         */\n        this._subscriptions = {};\n\n        /**\n         * Stored Pub/Sub topics\n         * @type {Set}\n         * @private\n         */\n        this._subsTopics = new Set();\n\n        /**\n         * Stored RPC Registrations\n         * @type {object}\n         * @private\n         */\n        this._rpcRegs = {};\n\n        /**\n         * Stored RPC names\n         * @type {Set}\n         * @private\n         */\n        this._rpcNames = new Set();\n\n        /**\n         * Options hash-table\n         * @type {Object}\n         * @private\n         */\n        this._options = {\n            /**\n             * Logging\n             * @type {boolean}\n             */\n            debug: false,\n\n            /**\n             * Logger\n             * @type {function}\n             */\n            logger: null,\n\n            /**\n             * Reconnecting flag\n             * @type {boolean}\n             */\n            autoReconnect: true,\n\n            /**\n             * Reconnecting interval (in ms)\n             * @type {number}\n             */\n            reconnectInterval: 2 * 1000,\n\n            /**\n             * Maximum reconnection retries\n             * @type {number}\n             */\n            maxRetries: 25,\n\n            /**\n             * WAMP Realm to join\n             * @type {string|null}\n             */\n            realm: null,\n\n            /**\n             * Custom attributes to send to router on hello\n             * @type {object}\n             */\n            helloCustomDetails: null,\n\n            /**\n             * Validation of the topic URI structure\n             * @type {string} - strict or loose\n             */\n            uriValidation: 'strict',\n\n            /**\n             * Authentication id to use in challenge\n             * @type {string|null}\n             */\n            authid: null,\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            authmethods: [],\n\n            /**\n             * Additional authentication options (used in WAMP CryptoSign for example)\n             * @type {object}\n             */\n            authextra: {},\n\n            /**\n             * Authentication helpers for processing different authmethods challenge flows\n             * @type {object}\n             */\n            authPlugins: {},\n\n            /**\n             * Mode of authorization flow\n             * Possible values: manual | auto\n             * @type {string}\n             */\n            authMode: 'manual',\n\n            /**\n             * onChallenge callback\n             * @type {function}\n             */\n            onChallenge: null,\n\n            /**\n             * onClose callback\n             * @type {function}\n             */\n            onClose: null,\n\n            /**\n             * onError callback\n             * @type {function}\n             */\n            onError: null,\n\n            /**\n             * onReconnect callback\n             * @type {function}\n             */\n            onReconnect: null,\n\n            /**\n             * onReconnectSuccess callback\n             * @type {function}\n             */\n            onReconnectSuccess: null,\n\n            /**\n             * User provided WebSocket class\n             * @type {function}\n             */\n            ws: null,\n\n            /**\n             * User provided additional HTTP headers (for use in Node.js enviroment)\n             * @type {object}\n             */\n            additionalHeaders: null,\n\n            /**\n             * User provided WS Client Config Options (for use in Node.js enviroment)\n             * @type {object}\n             */\n            wsRequestOptions: null,\n\n            /**\n             * User provided Serializer class\n             * @type {object}\n             */\n            serializer: jsonSerializer,\n\n            /**\n             * User provided Serializers for Payload Passthru Mode\n             * @type {object}\n             */\n            payloadSerializers: {\n                json: jsonSerializer\n            }\n        };\n\n        if (this._isPlainObject(options)) {\n            this._options = this._merge(this._options, options);\n        } else if (this._isPlainObject(url)) {\n            this._options = this._merge(this._options, url);\n        }\n\n    }\n\n    /* Internal utils methods */\n    /**\n     * Internal logger\n     * @private\n     */\n    _log (...args) {\n        if (this._options.debug) {\n            if (this._options.logger) {\n                this._options.logger(args);\n            } else {\n                console.log('[wampy]', args);\n            }\n        }\n    }\n\n    /**\n     * Get the new unique request id\n     * @returns {number}\n     * @private\n     */\n    _getReqId () {\n        return ++this._cache.reqId;\n    }\n\n    /**\n     * Merge argument objects into one\n     * @returns {Object}\n     * @private\n     */\n    _merge (...args) {\n        const obj = {}, l = args.length;\n        let i, attr;\n\n        for (i = 0; i < l; i++) {\n            for (attr in args[i]) {\n                obj[attr] = args[i][attr];\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Check if value is array\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isArray (obj) {\n        return (!!obj) && (Array.isArray(obj));\n    }\n\n    /**\n     * Check if value is object literal\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isPlainObject (obj) {\n        if (!this._isObject(obj)) {\n            return false;\n        }\n\n        // If obj has modified constructor\n        const ctor = obj.constructor;\n        if (typeof ctor !== 'function') {\n            return false;\n        }\n\n        // If obj has modified prototype\n        const prot = ctor.prototype;\n        if (this._isObject(prot) === false) {\n            return false;\n        }\n\n        // If constructor does not have an Object-specific method\n        return Object.hasOwnProperty.call(prot, 'isPrototypeOf') !== false;\n    }\n\n    /**\n     * Check if value is an object\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isObject (obj) {\n        return obj !== null\n            && typeof obj === 'object'\n            && Array.isArray(obj) === false\n            && Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    /**\n     * Set websocket protocol based on options\n     * @private\n     */\n    _setWsProtocols () {\n        this._protocols = ['wamp.2.' + this._options.serializer.protocol];\n    }\n\n    /**\n     * Fill instance operation status\n     * @param {Error} err\n     * @private\n     */\n    _fillOpStatusByError (err) {\n        this._cache.opStatus = {\n            code: err.code,\n            error: err,\n            reqId: 0\n        };\n    }\n\n    /**\n     * Prerequisite checks for any wampy api call\n     * @param {object} topicType { topic: URI, patternBased: true|false, allowWAMP: true|false }\n     * @param {string} role\n     * @returns {boolean}\n     * @private\n     */\n    _preReqChecks (topicType, role) {\n        let err;\n\n        if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n            switch (role) {\n                case 'dealer':\n                    err = new Errors.NoDealerError();\n                    break;\n                case 'broker':\n                    err = new Errors.NoBrokerError();\n                    break;\n            }\n            this._fillOpStatusByError(err);\n            return false;\n        }\n\n        if (topicType && !this._validateURI(topicType.topic, topicType.patternBased, topicType.allowWAMP)) {\n            this._fillOpStatusByError(new Errors.UriError());\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for specified feature in a role of connected WAMP Router\n     * @param {string} role\n     * @param {string} feature\n     * @returns {boolean}\n     * @private\n     */\n    _checkRouterFeature (role, feature) {\n        return this._cache.server_wamp_features.roles[role].features[feature] === true;\n    }\n\n    /**\n     * Check for PPT mode options correctness\n     * @param {string} role WAMP Router Role to check support\n     * @param {object} options\n     * @returns {boolean}\n     * @private\n     */\n    _checkPPTOptions (role, options) {\n        if (!this._checkRouterFeature(role, 'payload_passthru_mode')) {\n            this._fillOpStatusByError(new Errors.PPTNotSupportedError());\n            return false;\n        }\n\n        if (options.ppt_scheme.search(/^(wamp$|mqtt$|x_)/) < 0) {\n            this._fillOpStatusByError(new Errors.PPTInvalidSchemeError());\n            return false;\n        }\n\n        if (options.ppt_scheme === 'wamp' && !E2EE_SERIALIZERS.includes(options.ppt_serializer)) {\n            this._fillOpStatusByError(new Errors.PPTSerializerInvalidError());\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Validate uri\n     * @param {string} uri\n     * @param {boolean} patternBased\n     * @param {boolean} allowWAMP\n     * @returns {boolean}\n     * @private\n     */\n    _validateURI (uri, patternBased, allowWAMP) {\n        let reBase;\n        let rePattern;\n\n        if (this._options.uriValidation === 'strict') {\n            reBase = /^([0-9a-zA-Z_]+\\.)*([0-9a-zA-Z_]+)$/;\n            rePattern = /^([0-9a-zA-Z_]+\\.{1,2})*([0-9a-zA-Z_]+)$/;\n        } else if (this._options.uriValidation === 'loose') {\n            reBase = /^([^\\s.#]+\\.)*([^\\s.#]+)$/;\n            rePattern = /^([^\\s.#]+\\.{1,2})*([^\\s.#]+)$/;\n        } else {\n            return false;\n        }\n        const re = patternBased ? rePattern : reBase;\n\n        if (allowWAMP) {\n            return re.test(uri);\n        } else {\n            return !(!re.test(uri) || uri.indexOf('wamp.') === 0);\n        }\n    }\n\n    /**\n     * Prepares PPT/E2EE payload for adding to WAMP message\n     * @param {string|number|Array|object} payload\n     * @param {Object} options\n     * @returns {Object}\n     * @private\n     */\n    _packPPTPayload (payload, options) {\n        let payloadItems = [], err = false, argsList, argsDict;\n\n        if (this._isArray(payload)) {\n            argsList = payload;\n        } else if (this._isPlainObject(payload)) {\n            // It's a wampy unified form of payload passing\n            if (payload.argsList || payload.argsDict) {\n                if (this._isArray(payload.argsList)) {\n                    argsList = payload.argsList;\n                } else if (typeof (payload.argsList) !== 'undefined') {\n                    argsList = [payload.argsList];\n                }\n\n                if (payload.argsDict) {\n                    argsDict = payload.argsDict;\n                }\n            } else {\n                argsDict = payload;\n            }\n        } else {    // assume it's a single value\n            argsList = [payload];\n        }\n\n        // Check and handle Payload PassThru Mode\n        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n        if (options.ppt_scheme) {\n            let binPayload, pptPayload = { args: argsList, kwargs: argsDict };\n\n            if (options.ppt_serializer && options.ppt_serializer !== 'native') {\n                let pptSerializer = this._options.payloadSerializers[options.ppt_serializer];\n\n                if (!pptSerializer) {\n                    err = true;\n                    this._fillOpStatusByError(new Errors.PPTSerializerInvalidError());\n                    return { err, payloadItems };\n                }\n\n                try {\n                    binPayload = pptSerializer.encode(pptPayload);\n                } catch (e) {\n                    err = true;\n                    this._fillOpStatusByError(new Errors.PPTSerializationError());\n                    return { err, payloadItems };\n                }\n            } else {\n                binPayload = pptPayload;\n            }\n\n            // wamp scheme means Payload End-to-End Encryption\n            // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-end-to-end-encrypti\n            if (options.ppt_scheme === 'wamp') {\n\n                // TODO: implement End-to-End Encryption\n            }\n\n            payloadItems.push([binPayload]);\n\n        } else {\n            if (argsList) {\n                payloadItems.push(argsList);\n            }\n            if (argsDict) {\n                if (!argsList) {\n                    payloadItems.push([]);\n                }\n                payloadItems.push(argsDict);\n            }\n        }\n\n        return { err, payloadItems };\n    }\n\n    /**\n     * Unpack PPT/E2EE payload to common\n     * @param {string} role\n     * @param {Array} pptPayload\n     * @param {Object} options\n     * @returns {Object}\n     * @private\n     */\n    async _unpackPPTPayload (role, pptPayload, options) {\n        let err = false, decodedPayload;\n\n        if (!this._checkPPTOptions(role, options)) {\n            return { err: this._cache.opStatus.error };\n        }\n\n        // wamp scheme means Payload End-to-End Encryption\n        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-end-to-end-encrypti\n        if (options.ppt_scheme === 'wamp') {\n\n            // TODO: implement End-to-End Encryption\n\n        }\n\n        if (options.ppt_serializer && options.ppt_serializer !== 'native') {\n            let pptSerializer = this._options.payloadSerializers[options.ppt_serializer];\n\n            if (!pptSerializer) {\n                return { err: new Errors.PPTSerializerInvalidError() };\n            }\n\n            try {\n                decodedPayload = await pptSerializer.decode(pptPayload);\n            } catch (e) {\n                return { err: new Errors.PPTSerializationError() };\n            }\n        } else {\n            decodedPayload = pptPayload;\n        }\n        return { err, args: decodedPayload.args, kwargs: decodedPayload.kwargs };\n    }\n\n    /**\n     * Encode WAMP message\n     * @param {Array} msg\n     * @returns {*}\n     * @private\n     */\n    _encode (msg) {\n        try {\n            return this._options.serializer.encode(msg);\n        } catch (e) {\n            this._hardClose('wamp.error.protocol_violation', 'Can not encode message');\n        }\n    }\n\n    /**\n     * Decode WAMP message\n     * @param  msg\n     * @returns {Promise}\n     * @private\n     */\n    _decode (msg) {\n        return this._options.serializer.decode(msg);\n    }\n\n    /**\n     * Hard close of connection due to protocol violations\n     * @param {string} errorUri\n     * @param {string} details\n     * @private\n     */\n    _hardClose (errorUri, details) {\n        this._log(details);\n        // Cleanup outgoing message queue\n        this._wsQueue = [];\n        this._send([WAMP_MSG_SPEC.ABORT, { message: details }, errorUri]);\n\n        let err = new Errors.ProtocolViolationError(errorUri, details);\n\n        // In case we were just making first connection\n        if (this._cache.connectPromise) {\n            this._cache.connectPromise.onError(err);\n            this._cache.connectPromise = null;\n        }\n\n        if (this._options.onError) {\n            this._options.onError(err);\n        }\n\n        this._ws.close();\n    }\n\n    /**\n     * Send encoded message to server\n     * @param {Array} [msg]\n     * @private\n     */\n    _send (msg) {\n        if (msg) {\n            this._wsQueue.push(this._encode(msg));\n        }\n\n        if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n            while (this._wsQueue.length) {\n                this._ws.send(this._wsQueue.shift());\n            }\n        }\n    }\n\n    /**\n     * Reset internal state and cache\n     * @private\n     */\n    _resetState () {\n        this._wsQueue = [];\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n        this._requests = {};\n        this._calls = {};\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        // Just keep attrs that are have to be present\n        this._cache = {\n            reqId               : 0,\n            reconnectingAttempts: 0,\n            opStatus            : SUCCESS,\n            closePromise        : null,\n            connectPromise      : null,\n        };\n    }\n\n    /**\n     * Initialize internal websocket callbacks\n     * @private\n     */\n    _initWsCallbacks () {\n        if (this._ws) {\n            this._ws.onopen = () => {\n                this._wsOnOpen();\n            };\n            this._ws.onclose = event => {\n                this._wsOnClose(event);\n            };\n            this._ws.onmessage = event => {\n                this._wsOnMessage(event);\n            };\n            this._ws.onerror = error => {\n                this._wsOnError(error);\n            };\n        }\n    }\n\n    /**\n     * Internal websocket on open callback\n     * @private\n     */\n    _wsOnOpen () {\n        const options = this._merge(this._options.helloCustomDetails, this._wamp_features),\n            serverProtocol = this._ws.protocol ? this._ws.protocol.split('.')[2] : '';\n        if (this._options.authid) {\n            options.authmethods = this._options.authmethods;\n            options.authid = this._options.authid;\n            options.authextra = this._options.authextra;\n        }\n\n        this._log('websocket connected');\n\n        if (this._options.serializer.protocol !== serverProtocol) {\n            // Server have chosen not our preferred protocol\n\n            // Falling back to json if possible\n            // Temp hack for React Native Environment is removed as\n            // (facebook/react-native#24796) was resolved\n            if (serverProtocol === 'json') {\n                this._options.serializer = new JsonSerializer();\n            } else {\n                this._fillOpStatusByError(new Errors.NoSerializerAvailableError());\n                return this;\n            }\n\n        }\n\n        if (this._options.serializer.isBinary) {\n            this._ws.binaryType = 'arraybuffer';\n        }\n\n        // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n        // Sending directly 'cause it's a hello msg and no sessionId check is needed\n        this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n    }\n\n    /**\n     * Internal websocket on close callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnClose (event) {\n        this._log('websocket disconnected. Info: ', event);\n\n        // Automatic reconnection\n        if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n            this._options.autoReconnect &&\n            (this._options.maxRetries === 0 ||\n             this._cache.reconnectingAttempts < this._options.maxRetries) &&\n            !this._cache.isSayingGoodbye) {\n            this._cache.sessionId = null;\n            this._cache.timer = setTimeout(() => {\n                this._wsReconnect();\n            }, this._options.reconnectInterval);\n        } else {\n            // No reconnection needed or reached max retries count\n            if (this._options.onClose) {\n                this._options.onClose();\n            } else if (this._cache.closePromise) {\n                this._cache.closePromise.onSuccess();\n                this._cache.closePromise = null;\n            }\n            this._resetState();\n            this._ws = null;\n        }\n    }\n\n    /**\n     * Internal websocket on event callback\n     * @param {object} event\n     * @private\n     */\n    async _wsOnMessage (event) {\n        let data;\n        try {\n            data = await this._decode(event.data);\n        } catch (e) {\n            this._hardClose('wamp.error.protocol_violation', 'Can not decode received message');\n        }\n\n        this._log('websocket message received: ', data);\n\n        let id, i, p, self = this;\n\n        switch (data[0]) {\n            case WAMP_MSG_SPEC.WELCOME:\n                // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n                if (this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received WELCOME message after session was established');\n                } else {\n                    this._cache.sessionId = data[1];\n                    this._cache.server_wamp_features = data[2];\n\n                    if (this._cache.reconnectingAttempts) {\n                        // There was reconnection\n\n                        this._cache.reconnectingAttempts = 0;\n\n                        if (this._options.onReconnectSuccess) {\n                            this._options.onReconnectSuccess(data[2]);\n                        }\n\n                        // Let's renew all previous state\n                        this._renewSubscriptions();\n                        this._renewRegistrations();\n\n                    } else {\n                        // Firing onConnect event on real connection to WAMP server\n                        this._cache.connectPromise.onSuccess(data[2]);\n                        this._cache.connectPromise = null;\n                    }\n\n                    // Send local queue if there is something out there\n                    this._send();\n                }\n                break;\n            case WAMP_MSG_SPEC.ABORT:\n                // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                if (this._options.onError) {\n                    this._options.onError(new Errors.AbortError({ error: data[2], details: data[1] }));\n                }\n                this._ws.close();\n                break;\n            case WAMP_MSG_SPEC.CHALLENGE:\n                // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n                if (this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received CHALLENGE message after session was established');\n                    break;\n                } else if (this._options.authid &&\n                    this._options.authMode === 'manual' &&\n                    typeof this._options.onChallenge === 'function') {\n\n                    p = new Promise((resolve, reject) => {\n                        resolve(this._options.onChallenge(data[1], data[2]));\n                    });\n\n                } else if (this._options.authid &&\n                    this._options.authMode === 'auto' &&\n                    typeof this._options.authPlugins[data[1]] === 'function') {\n\n                    p = new Promise((resolve, reject) => {\n                        resolve(this._options.authPlugins[data[1]](data[1], data[2]));\n                    });\n\n                } else {\n                    let error = new Errors.NoCRACallbackOrIdError();\n\n                    this._fillOpStatusByError(error);\n                    this._ws.send(this._encode([\n                        WAMP_MSG_SPEC.ABORT,\n                        { message: error.message },\n                        'wamp.error.cannot_authenticate'\n                    ]));\n                    if (this._options.onError) {\n                        this._options.onError(error);\n                    }\n                    this._ws.close();\n                    break;\n                }\n\n                p.then((key) => {\n\n                    // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                    this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                }).catch(e => {\n                    let error = new Errors.ChallengeExceptionError();\n\n                    this._fillOpStatusByError(error);\n                    this._ws.send(this._encode([\n                        WAMP_MSG_SPEC.ABORT,\n                        { message: error.message },\n                        'wamp.error.cannot_authenticate'\n                    ]));\n                    if (this._options.onError) {\n                        this._options.onError(error);\n                    }\n                    this._ws.close();\n                });\n\n                break;\n            case WAMP_MSG_SPEC.GOODBYE:\n                // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received GOODBYE message before session was established');\n                } else {\n                    if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                        this._cache.isSayingGoodbye = true;\n                        this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.goodbye_and_out']);\n                    }\n                    this._cache.sessionId = null;\n                    this._ws.close();\n                }\n                break;\n            case WAMP_MSG_SPEC.ERROR:\n                // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received ERROR message before session was established');\n                } else {\n                    switch (data[1]) {\n                        case WAMP_MSG_SPEC.SUBSCRIBE:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError(new Errors.SubscribeError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            }));\n                            delete this._requests[data[2]];\n\n                            break;\n                        case WAMP_MSG_SPEC.UNSUBSCRIBE:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError(new Errors.UnsubscribeError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            }));\n                            delete this._requests[data[2]];\n\n                            break;\n                        case WAMP_MSG_SPEC.PUBLISH:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError(new Errors.PublishError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            }));\n                            delete this._requests[data[2]];\n\n                            break;\n                        case WAMP_MSG_SPEC.REGISTER:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError(new Errors.RegisterError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            }));\n                            delete this._requests[data[2]];\n\n                            break;\n                        case WAMP_MSG_SPEC.UNREGISTER:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError(new Errors.UnregisterError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            }));\n                            delete this._requests[data[2]];\n\n                            break;\n                        // case WAMP_MSG_SPEC.INVOCATION:\n                        //     break;\n                        case WAMP_MSG_SPEC.CALL:\n\n                            // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                            //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                            this._calls[data[2]] && this._calls[data[2]].onError &&\n                            this._calls[data[2]].onError(new Errors.CallError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            }));\n                            delete this._calls[data[2]];\n\n                            break;\n                        default:\n                            this._hardClose('wamp.error.protocol_violation', 'Received invalid ERROR message');\n                            break;\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.SUBSCRIBED:\n                // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received SUBSCRIBED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                            id             : data[2],\n                            callbacks      : [this._requests[data[1]].callbacks.onEvent],\n                            advancedOptions: this._requests[data[1]].advancedOptions\n                        };\n\n                        this._subsTopics.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic         : this._requests[data[1]].topic,\n                                requestId     : data[1],\n                                subscriptionId: data[2]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received UNSUBSCRIBED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        id = this._subscriptions[this._requests[data[1]].topic].id;\n                        delete this._subscriptions[this._requests[data[1]].topic];\n                        delete this._subscriptions[id];\n\n                        if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                            this._subsTopics.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic    : this._requests[data[1]].topic,\n                                requestId: data[1]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.PUBLISHED:\n                // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received PUBLISHED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic        : this._requests[data[1]].topic,\n                                requestId    : data[1],\n                                publicationId: data[2]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.EVENT:\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received EVENT message before session was established');\n                } else {\n                    if (this._subscriptions[data[1]]) {\n                        let argsList, argsDict, options = data[3];\n\n                        // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                        //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                        // Check and handle Payload PassThru Mode\n                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                        if (options.ppt_scheme) {\n                            let decodedPayload, pptPayload = data[4][0];\n\n                            decodedPayload = await this._unpackPPTPayload('broker', pptPayload, options);\n\n                            if (decodedPayload.err) {\n                                // Since it is async publication, and no link to\n                                // original publication - as it was already published\n                                // we can not reply with error, only log it.\n                                // Although the router should handle it\n                                this._log(decodedPayload.err.message);\n                                break;\n                            }\n\n                            argsList = decodedPayload.args;\n                            argsDict = decodedPayload.kwargs;\n\n                        } else {\n                            argsList = data[4];\n                            argsDict = data[5];\n                        }\n\n                        i = this._subscriptions[data[1]].callbacks.length;\n                        while (i--) {\n                            this._subscriptions[data[1]].callbacks[i]({\n                                details : options,\n                                argsList: argsList,\n                                argsDict: argsDict\n                            });\n                        }\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.RESULT:\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received RESULT message before session was established');\n                } else {\n                    if (this._calls[data[1]]) {\n                        let argsList, argsDict, options = data[2];\n\n                        // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                        //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                        // Check and handle Payload PassThru Mode\n                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                        if (options.ppt_scheme) {\n                            let decodedPayload, pptPayload = data[3][0];\n\n                            decodedPayload = await this._unpackPPTPayload('dealer', pptPayload, options);\n\n                            if (decodedPayload.err) {\n                                this._log(decodedPayload.err.message);\n                                this._cache.opStatus = decodedPayload.err;\n                                this._calls[data[1]].onError(new Errors.CallError({\n                                    error     : 'wamp.error.invocation_exception',\n                                    details   : data[2],\n                                    argsList  : [decodedPayload.err.message],\n                                    argsDict  : null\n                                }));\n                                delete this._calls[data[1]];\n                                break;\n                            }\n\n                            argsList = decodedPayload.args;\n                            argsDict = decodedPayload.kwargs;\n\n                        } else {\n                            argsList = data[3];\n                            argsDict = data[4];\n                        }\n\n                        if (options.progress === true) {\n                            this._calls[data[1]].onProgress({\n                                details : options,\n                                argsList: argsList,\n                                argsDict: argsDict\n                            });\n                        } else {\n                            // We received final result (progressive or not)\n                            this._calls[data[1]].onSuccess({\n                                details : options,\n                                argsList: argsList,\n                                argsDict: argsDict\n                            });\n                            delete this._calls[data[1]];\n                        }\n                    }\n                }\n                break;\n            // case WAMP_MSG_SPEC.REGISTER:\n            //     // WAMP SPEC:\n            //     break;\n            case WAMP_MSG_SPEC.REGISTERED:\n                // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received REGISTERED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                            id       : data[2],\n                            callbacks: [this._requests[data[1]].callbacks.rpc]\n                        };\n\n                        this._rpcNames.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic         : this._requests[data[1]].topic,\n                                requestId     : data[1],\n                                registrationId: data[2]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            // case WAMP_MSG_SPEC.UNREGISTER:\n            //     // WAMP SPEC:\n            //     break;\n            case WAMP_MSG_SPEC.UNREGISTERED:\n                // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received UNREGISTERED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        id = this._rpcRegs[this._requests[data[1]].topic].id;\n                        delete this._rpcRegs[this._requests[data[1]].topic];\n                        delete this._rpcRegs[id];\n\n                        if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                            this._rpcNames.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic    : this._requests[data[1]].topic,\n                                requestId: data[1]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.INVOCATION:\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received INVOCATION message before session was established');\n                } else {\n                    if (this._rpcRegs[data[2]]) {\n                        let argsList, argsDict, options = data[3];\n\n                        // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                        //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                        let invoke_error_handler = ({ details, error, argsList, argsDict }) => {\n                                let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                    data[1], details || {}, error || 'wamp.error.invocation_exception'];\n\n                                if (argsList && self._isArray(argsList)) {\n                                    msg.push(argsList);\n                                }\n\n                                if (argsDict && self._isPlainObject(argsDict)) {\n                                    if (msg.length === 5) {\n                                        msg.push([]);\n                                    }\n                                    msg.push(argsDict);\n                                }\n                                self._send(msg);\n                            },\n                            invoke_result_handler = results => {\n                                // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list,\n                                // ArgumentsKw|dict)]\n                                let msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n\n                                if (self._isPlainObject(results)) {\n\n                                    if (self._isPlainObject(results.options)) {\n                                        let options = results.options;\n\n                                        // Check and handle Payload PassThru Mode\n                                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                                        let pptScheme = results.options.ppt_scheme;\n\n                                        if (pptScheme) {\n                                            if (!this._checkPPTOptions('dealer', results.options)) {\n                                                if (this._cache.opStatus.error && this._cache.opStatus.error instanceof Errors.PPTNotSupportedError) {\n                                                    // This case should not happen at all, but for safety\n                                                    this._hardClose('wamp.error.protocol_violation', 'Trying to send YIELD in PPT Mode, while Dealer didn\\'t announce it');\n                                                } else {\n                                                    invoke_error_handler({\n                                                        details : results.options,\n                                                        error   : 'wamp.error.invalid_option',\n                                                        argsList: [this._cache.opStatus.error.message],\n                                                        argsDict: null\n                                                    });\n                                                }\n                                                return;\n                                            }\n\n                                            options.ppt_scheme = pptScheme;\n\n                                            if (results.options.ppt_serializer) {\n                                                options.ppt_serializer = results.options.ppt_serializer;\n                                            }\n                                            if (results.options.ppt_cipher) {\n                                                options.ppt_cipher = results.options.ppt_cipher;\n                                            }\n                                            if (results.options.ppt_keyid) {\n                                                options.ppt_keyid = results.options.ppt_keyid;\n                                            }\n                                        }\n\n                                        msg[2] = options;\n                                    }\n\n                                }\n\n                                if (results !== null && typeof (results) !== 'undefined') {\n                                    let res = this._packPPTPayload(results, results.options);\n\n                                    if (res.err) {\n                                        invoke_error_handler({\n                                            details : results.options,\n                                            error   : null, // will be default'ed to invocation_exception\n                                            argsList: [this._cache.opStatus.error.message],\n                                            argsDict: null\n                                        });\n                                        return;\n                                    }\n                                    msg = msg.concat(res.payloadItems);\n                                }\n\n                                self._send(msg);\n                            };\n\n                        // Check and handle Payload PassThru Mode\n                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                        if (options.ppt_scheme) {\n                            let decodedPayload, pptPayload = data[4][0];\n\n                            decodedPayload = await this._unpackPPTPayload('dealer', pptPayload, options);\n\n                            // This case should not happen at all, but for safety\n                            if (decodedPayload.err && decodedPayload.err instanceof Errors.PPTNotSupportedError) {\n                                this._log(decodedPayload.err.message);\n                                this._hardClose('wamp.error.protocol_violation', 'Received INVOCATION in PPT Mode, while Dealer didn\\'t announce it');\n                                break;\n                            } else if (decodedPayload.err) {\n\n                                this._log(decodedPayload.err.message);\n                                invoke_error_handler({\n                                    details : data[3],\n                                    error   : null, // will be default'ed to invocation_exception,\n                                    argsList: [decodedPayload.err.message],\n                                    argsDict: null\n                                });\n                                break;\n                            }\n\n                            argsList = decodedPayload.args;\n                            argsDict = decodedPayload.kwargs;\n\n                        } else {\n                            argsList = data[4];\n                            argsDict = data[5];\n                        }\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._rpcRegs[data[2]].callbacks[0]({\n                                details       : options,\n                                argsList      : argsList,\n                                argsDict      : argsDict,\n                                result_handler: invoke_result_handler,\n                                error_handler : invoke_error_handler\n                            }));\n                        });\n\n                        p.then((results) => {\n                            invoke_result_handler(results);\n                        }).catch(e => {\n                            invoke_error_handler(e);\n                        });\n\n                    } else {\n                        // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                        this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                            data[1], {}, 'wamp.error.no_such_procedure']);\n                        this._log(WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION);\n                    }\n                }\n                break;\n            // case WAMP_MSG_SPEC.INTERRUPT:\n            //     // WAMP SPEC:\n            //     break;\n            // case WAMP_MSG_SPEC.YIELD:\n            //     // WAMP SPEC:\n            //     break;\n            default:\n                this._hardClose('wamp.error.protocol_violation', 'Received non-compliant WAMP message');\n                break;\n        }\n    }\n\n    /**\n     * Internal websocket on error callback\n     * @param {object} error\n     * @private\n     */\n    _wsOnError (error) {\n        this._log('websocket error');\n        let err = new Errors.WebsocketError(error);\n\n        if (this._cache.connectPromise) {\n            this._cache.connectPromise.onError(err);\n            this._cache.connectPromise = null;\n        }\n\n        if (this._options.onError) {\n            this._options.onError(err);\n        }\n    }\n\n    /**\n     * Reconnect to server in case of websocket error\n     * @private\n     */\n    _wsReconnect () {\n        this._log('websocket reconnecting...');\n\n        if (this._options.onReconnect) {\n            this._options.onReconnect();\n        }\n\n        this._cache.reconnectingAttempts++;\n        this._ws = getWebSocket(this._url, this._protocols, this._options.ws,\n            this._options.additionalHeaders, this._options.wsRequestOptions);\n        this._initWsCallbacks();\n    }\n\n    /**\n     * Resubscribe to topics in case of communication error\n     * @private\n     */\n    _renewSubscriptions () {\n        let i;\n        const subs = this._subscriptions,\n            st = this._subsTopics;\n\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n\n        for (let topic of st) {\n            i = subs[topic].callbacks.length;\n            while (i--) {\n                this.subscribe(topic, subs[topic].callbacks[i], subs[topic].advancedOptions);\n            }\n        }\n    }\n\n    /**\n     * Reregister RPCs in case of communication error\n     * @private\n     */\n    _renewRegistrations () {\n        const rpcs = this._rpcRegs,\n            rn = this._rpcNames;\n\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        for (let rpcName of rn) {\n            this.register(rpcName, rpcs[rpcName].callbacks[0]);\n        }\n    }\n\n    /*************************************************************************\n     * Wampy public API\n     *************************************************************************/\n\n    /**\n     * Get or set Wampy options\n     *\n     * To get options - call without parameters\n     * To set options - pass hash-table with options values\n     *\n     * @param {object} [opts]\n     * @returns {*}\n     */\n    options (opts) {\n        if (typeof (opts) === 'undefined') {\n            return this._options;\n        } else if (this._isPlainObject(opts)) {\n            this._options = this._merge(this._options, opts);\n            return this;\n        }\n    }\n\n    /**\n     * Get the status of last operation\n     *\n     * @returns {object} with 3 fields: code, error, reqId\n     *      code: 0 - if operation was successful\n     *      code > 0 - if error occurred\n     *      error: error instance containing details\n     *      reqId: last successfully sent request ID\n     */\n    getOpStatus () {\n        return this._cache.opStatus;\n    }\n\n    /**\n     * Get the WAMP Session ID\n     *\n     * @returns {string} Session ID\n     */\n    getSessionId () {\n        return this._cache.sessionId;\n    }\n\n    /**\n     * Connect to server\n     * @param {string} [url] New url (optional)\n     * @returns {Promise}\n     */\n    async connect (url) {\n        let error;\n\n        if (url) {\n            this._url = url;\n        }\n\n        if (this._options.realm) {\n\n            const authOpts = (this._options.authid ? 1 : 0) +\n                ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                (typeof this._options.onChallenge === 'function' ||\n                 Object.keys(this._options.authPlugins).length ? 1 : 0);\n\n            if (authOpts > 0 && authOpts < 3) {\n                error = new Errors.NoCRACallbackOrIdError();\n                this._fillOpStatusByError(error);\n                throw error;\n            }\n\n            this._setWsProtocols();\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws,\n                this._options.additionalHeaders, this._options.wsRequestOptions);\n            if (!this._ws) {\n                error = new Errors.NoWsOrUrlError();\n                this._fillOpStatusByError(error);\n                throw error;\n            }\n            this._initWsCallbacks();\n\n        } else {\n            error = new Errors.NoRealmError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        let defer = getNewPromise();\n        this._cache.connectPromise = defer;\n        return defer.promise;\n    }\n\n    /**\n     * Disconnect from server\n     * @returns {Promise}\n     */\n    async disconnect () {\n        if (this._cache.sessionId) {\n            let defer = getNewPromise();\n            this._cache.opStatus = SUCCESS;\n            this._cache.closePromise = defer;\n            // need to send goodbye message to server\n            this._cache.isSayingGoodbye = true;\n            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.system_shutdown']);\n\n            return defer.promise;\n\n        } else if (this._ws) {\n            this._ws.close();\n        }\n\n        return true;\n    }\n\n    /**\n     * Abort WAMP session establishment\n     *\n     * @returns {Wampy}\n     */\n    abort () {\n\n        if (!this._cache.sessionId && this._ws.readyState === 1) {\n            this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n            this._cache.sessionId = null;\n        }\n\n        this._ws.close();\n        this._cache.opStatus = SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Subscribe to a topic on a broker\n     *\n     * @param {string} topicURI\n     * @param {function} onEvent - received event callback\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { match: string matching policy (\"prefix\"|\"wildcard\") }\n     *\n     * @returns {Promise}\n     */\n    async subscribe (topicURI, onEvent, advancedOptions) {\n        let reqId, patternBased = false;\n        const options = {}, callbacks = getNewPromise();\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.prototype.hasOwnProperty.call(advancedOptions, 'match')) {\n                if (/prefix|wildcard/.test(advancedOptions.match)) {\n                    options.match = advancedOptions.match;\n                    patternBased = true;\n                } else {\n                    let error = new Errors.InvalidParamError('match');\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError('advancedOptions');\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        // Need to be placed here as patternBased flag is determined above\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: true },\n            'broker')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (typeof onEvent === 'function') {\n            callbacks.onEvent = onEvent;\n        } else {\n            let error = new Errors.NoCallbackError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n            // no such subscription or processing unsubscribing\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks,\n                advancedOptions\n            };\n\n            // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n            this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, options, topicURI]);\n\n        } else {    // already have subscription to this topic\n            // There is no such callback yet\n            if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n            }\n\n            return {\n                topic: topicURI,\n                subscriptionId: this._subscriptions[topicURI].id\n            };\n        }\n\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * Unsubscribe from topic\n     * @param {string} topicURI\n     * @param {function} [onEvent] - received event callback to remove (optional). If not provided -\n     *                               all callbacks will be removed and unsubscribed on the server\n     * @returns {Promise}\n     */\n    async unsubscribe (topicURI, onEvent) {\n        let reqId;\n        const callbacks = getNewPromise();\n\n        if (!this._preReqChecks(null, 'broker')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (this._subscriptions[topicURI]) {\n\n            reqId = this._getReqId();\n\n            if (typeof onEvent === 'function') {\n                let i = this._subscriptions[topicURI].callbacks.indexOf(onEvent);\n                if (i >= 0) {\n                    this._subscriptions[topicURI].callbacks.splice(i, 1);\n                }\n            } else {\n                this._subscriptions[topicURI].callbacks = [];\n            }\n\n            if (this._subscriptions[topicURI].callbacks.length) {\n                // There are another callbacks for this topic\n                this._cache.opStatus = SUCCESS;\n                return true;\n            }\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n            this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n        } else {\n            let error = new Errors.NonExistUnsubscribeError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * Publish an event to the topic\n     * @param {string} topicURI\n     * @param {string|number|Array|object} [payload] - can be either a value of any type or null or even omitted.\n     *                          Also, it is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n     *                                      even though they may be subscribed\n     *                            exclude_authid: string|array Authentication id(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            exclude_authrole: string|array Authentication role(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            eligible: integer|array WAMP session id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authid: string|array Authentication id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authrole: string|array Authentication role(s) that are allowed\n     *                                      to receive a published event\n     *                            exclude_me: bool flag of receiving publishing event by initiator\n     *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n     *                                      to receivers of a published event }\n     * @returns {Promise}\n     */\n    async publish (topicURI, payload, advancedOptions) {\n        let reqId, msg;\n        const options = { acknowledge: true }, callbacks = getNewPromise(),\n            _optionsConvertHelper = (option, sourceType) => {\n                if (advancedOptions[option]) {\n                    if (this._isArray(advancedOptions[option]) && advancedOptions[option].length) {\n                        options[option] = advancedOptions[option];\n                    } else if (typeof advancedOptions[option] === sourceType) {\n                        options[option] = [advancedOptions[option]];\n                    } else {\n                        return false;\n                    }\n                }\n\n                return true;\n            };\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'broker')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (!_optionsConvertHelper('exclude', 'number') ||\n                !_optionsConvertHelper('exclude_authid', 'string') ||\n                !_optionsConvertHelper('exclude_authrole', 'string') ||\n                !_optionsConvertHelper('eligible', 'number') ||\n                !_optionsConvertHelper('eligible_authid', 'string') ||\n                !_optionsConvertHelper('eligible_authrole', 'string')) {\n\n                let error = new Errors.InvalidParamError('advancedOptions');\n                this._fillOpStatusByError(error);\n                throw error;\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'exclude_me')) {\n                options.exclude_me = advancedOptions.exclude_me !== false;\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'disclose_me')) {\n                options.disclose_me = advancedOptions.disclose_me === true;\n            }\n\n            // Check and handle Payload PassThru Mode\n            // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n            let pptScheme = advancedOptions.ppt_scheme;\n\n            if (pptScheme) {\n                if (!this._checkPPTOptions('broker', advancedOptions)) {\n                    throw this._cache.opStatus.error;\n                }\n\n                options.ppt_scheme = pptScheme;\n\n                if (advancedOptions.ppt_serializer) {\n                    options.ppt_serializer = advancedOptions.ppt_serializer;\n                }\n                if (advancedOptions.ppt_cipher) {\n                    options.ppt_cipher = advancedOptions.ppt_cipher;\n                }\n                if (advancedOptions.ppt_keyid) {\n                    options.ppt_keyid = advancedOptions.ppt_keyid;\n                }\n            }\n\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError('advancedOptions');\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        reqId = this._getReqId();\n\n        this._requests[reqId] = {\n            topic: topicURI,\n            callbacks\n        };\n\n        // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n\n        if (arguments.length > 1) {\n            // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n            let res = this._packPPTPayload(payload, options);\n\n            if (res.err) {\n                throw this._cache.opStatus.error;\n            }\n            msg = msg.concat(res.payloadItems);\n        }\n\n        this._send(msg);\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * Remote Procedure Call\n     * @param {string} topicURI\n     * @param {string|number|Array|object} [payload] - can be either a value of any type or null. Also, it\n     *                          is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { disclose_me:      bool flag of disclosure of Caller identity (WAMP session ID)\n     *                                              to endpoints of a routed call\n     *                            progress_callback: function for handling progressive call results\n     *                            timeout:          integer timeout (in ms) for the call to finish\n     *                          }\n     * @returns {Promise}\n     */\n    async call (topicURI, payload, advancedOptions) {\n        let reqId, msg;\n        const options = {}, callbacks = getNewPromise();\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: true }, 'dealer')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.hasOwnProperty.call(advancedOptions, 'disclose_me')) {\n                options.disclose_me = advancedOptions.disclose_me === true;\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'progress_callback')) {\n                if (typeof advancedOptions.progress_callback === 'function') {\n                    options.receive_progress = true;\n                    callbacks.onProgress = advancedOptions.progress_callback;\n                } else {\n                    let error = new Errors.InvalidParamError('progress_callback');\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'timeout')) {\n                if (typeof advancedOptions.timeout === 'number') {\n                    options.timeout = advancedOptions.timeout;\n                } else {\n                    let error = new Errors.InvalidParamError('timeout');\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n            // Check and handle Payload PassThru Mode\n            // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n            let pptScheme = advancedOptions.ppt_scheme;\n\n            if (pptScheme) {\n                if (!this._checkPPTOptions('dealer', advancedOptions)) {\n                    throw this._cache.opStatus.error;\n                }\n\n                options.ppt_scheme = pptScheme;\n\n                if (advancedOptions.ppt_serializer) {\n                    options.ppt_serializer = advancedOptions.ppt_serializer;\n                }\n                if (advancedOptions.ppt_cipher) {\n                    options.ppt_cipher = advancedOptions.ppt_cipher;\n                }\n                if (advancedOptions.ppt_keyid) {\n                    options.ppt_keyid = advancedOptions.ppt_keyid;\n                }\n            }\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError('advancedOptions');\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        do {\n            reqId = this._getReqId();\n        } while (reqId in this._calls);\n\n        this._calls[reqId] = callbacks;\n\n        // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n        msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n\n        if (payload !== null && typeof (payload) !== 'undefined') {\n            let res = this._packPPTPayload(payload, options);\n\n            if (res.err) {\n                throw this._cache.opStatus.error;\n            }\n            msg = msg.concat(res.payloadItems);\n        }\n\n        this._send(msg);\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * RPC invocation cancelling\n     *\n     * @param {int} reqId RPC call request ID\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { mode: string|one of the possible modes:\n     *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n     *                          }\n     *\n     * @returns {Boolean}\n     */\n    cancel (reqId, advancedOptions) {\n        const options = {};\n\n        if (!this._preReqChecks(null, 'dealer')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (!reqId || !this._calls[reqId]) {\n            let error = new Errors.NonExistRPCReqIdError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.hasOwnProperty.call(advancedOptions, 'mode')) {\n                if (/skip|kill|killnowait/.test(advancedOptions.mode)) {\n                    options.mode = advancedOptions.mode;\n                } else {\n                    let error = new Errors.InvalidParamError('mode');\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError('advancedOptions');\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n        this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n\n        return true;\n    }\n\n    /**\n     * RPC registration for invocation\n     * @param {string} topicURI\n     * @param {function} rpc - rpc that will receive invocations\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          {\n     *                              match: string matching policy (\"prefix\"|\"wildcard\")\n     *                              invoke: string invocation policy (\"single\"|\"roundrobin\"|\"random\"|\"first\"|\"last\")\n     *                          }\n     * @returns {Promise}\n     */\n    async register (topicURI, rpc, advancedOptions) {\n        let reqId, patternBased = false;\n        const options = {}, callbacks = getNewPromise();\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.hasOwnProperty.call(advancedOptions, 'match')) {\n                if (/prefix|wildcard/.test(advancedOptions.match)) {\n                    options.match = advancedOptions.match;\n                    patternBased = true;\n                } else {\n                    let error = new Errors.InvalidParamError('match');\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'invoke')) {\n                if (/single|roundrobin|random|first|last/.test(advancedOptions.invoke)) {\n                    options.invoke = advancedOptions.invoke;\n                } else {\n                    let error = new Errors.InvalidParamError('invoke');\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError('advancedOptions');\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        // Need to be placed here as patternBased flag is determined above\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: false },\n            'dealer')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (typeof rpc === 'function') {\n            callbacks.rpc = rpc;\n        } else {\n            let error = new Errors.NoCallbackError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n            // no such registration or processing unregistering\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n            this._send([WAMP_MSG_SPEC.REGISTER, reqId, options, topicURI]);\n            this._cache.opStatus = SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // already have registration with such topicURI\n            let error = new Errors.RPCAlreadyRegisteredError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        return callbacks.promise;\n    }\n\n    /**\n     * RPC unregistration for invocation\n     * @param {string} topicURI\n     * @returns {Promise}\n     */\n    async unregister (topicURI) {\n        let reqId;\n        const callbacks = getNewPromise();\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'dealer')) {\n            throw this._cache.opStatus.error;        }\n\n        if (this._rpcRegs[topicURI]) {   // there is such registration\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n            this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n            this._cache.opStatus = SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // there is no registration with such topicURI\n            let error = new Errors.NonExistRPCUnregistrationError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        return callbacks.promise;\n    }\n}\n\nexport default Wampy;\nexport { Wampy, Errors };\n"],"mappings":"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"}
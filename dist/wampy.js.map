{"version":3,"file":"wampy.js","names":["jsonSerializer","JsonSerializer","Wampy","url","options","version","_url","_protocols","_wamp_features","agent","roles","publisher","features","subscriber_blackwhite_listing","publisher_exclusion","publisher_identification","payload_passthru_mode","subscriber","pattern_based_subscription","publication_trustlevels","caller","caller_identification","progressive_call_results","call_canceling","call_timeout","callee","call_trustlevels","pattern_based_registration","shared_registration","_cache","sessionId","reqId","server_wamp_features","isSayingGoodbye","opStatus","code","error","timer","reconnectingAttempts","connectPromise","closePromise","_ws","_wsQueue","_requests","_calls","_subscriptions","_subsTopics","Set","_rpcRegs","_rpcNames","_options","debug","logger","autoReconnect","reconnectInterval","maxRetries","realm","helloCustomDetails","uriValidation","authid","authmethods","authextra","authPlugins","authMode","onChallenge","onClose","onError","onReconnect","onReconnectSuccess","ws","additionalHeaders","wsRequestOptions","serializer","payloadSerializers","json","_isPlainObject","_merge","args","console","log","obj","l","length","i","attr","Array","isArray","_isObject","ctor","constructor","prot","prototype","Object","hasOwnProperty","call","toString","protocol","err","topicType","role","Errors","NoDealerError","NoBrokerError","_fillOpStatusByError","_validateURI","topic","patternBased","allowWAMP","UriError","feature","_checkRouterFeature","PPTNotSupportedError","ppt_scheme","search","PPTInvalidSchemeError","E2EE_SERIALIZERS","includes","ppt_serializer","PPTSerializerInvalidError","uri","reBase","rePattern","re","test","indexOf","payload","payloadItems","argsList","argsDict","_isArray","binPayload","pptPayload","kwargs","pptSerializer","encode","e","PPTSerializationError","push","_checkPPTOptions","decode","decodedPayload","msg","_hardClose","errorUri","details","_log","_send","WAMP_MSG_SPEC","ABORT","message","close","_encode","readyState","send","shift","SUCCESS","onopen","_wsOnOpen","onclose","event","_wsOnClose","onmessage","_wsOnMessage","onerror","_wsOnError","serverProtocol","split","NoSerializerAvailableError","isBinary","binaryType","HELLO","setTimeout","_wsReconnect","onSuccess","_resetState","_decode","data","self","WELCOME","CHALLENGE","GOODBYE","ERROR","SUBSCRIBED","UNSUBSCRIBED","PUBLISHED","EVENT","RESULT","REGISTERED","UNREGISTERED","INVOCATION","_renewSubscriptions","_renewRegistrations","p","Promise","resolve","reject","NoCRACallbackOrIdError","then","key","AUTHENTICATE","ChallengeExceptionError","SUBSCRIBE","UNSUBSCRIBE","PUBLISH","REGISTER","UNREGISTER","CALL","callbacks","id","onEvent","advancedOptions","add","requestId","subscriptionId","has","publicationId","_unpackPPTPayload","progress","onProgress","rpc","registrationId","invoke_error_handler","invoke_result_handler","results","YIELD","pptScheme","ppt_cipher","ppt_keyid","res","_packPPTPayload","concat","result_handler","error_handler","WAMP_ERROR_MSG","NON_EXIST_RPC_INVOCATION","getWebSocket","_initWsCallbacks","subs","st","subscribe","rpcs","rn","rpcName","register","opts","authOpts","keys","_setWsProtocols","NoWsOrUrlError","NoRealmError","defer","getNewPromise","promise","topicURI","match","InvalidParamError","_preReqChecks","NoCallbackError","_getReqId","splice","NonExistUnsubscribeError","acknowledge","_optionsConvertHelper","option","sourceType","exclude_me","disclose_me","progress_callback","receive_progress","timeout","NonExistRPCReqIdError","mode","CANCEL","invoke","RPCAlreadyRegisteredError","NonExistRPCUnregistrationError"],"sources":["../src/wampy.js"],"sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\nimport { WAMP_MSG_SPEC, WAMP_ERROR_MSG, E2EE_SERIALIZERS, SUCCESS } from './constants.js';\nimport * as Errors from './errors.js';\nimport { getWebSocket, getNewPromise } from './utils.js';\nimport { JsonSerializer } from './serializers/JsonSerializer.js';\nconst jsonSerializer = new JsonSerializer();\n\n/**\n * WAMP Client Class\n */\nclass Wampy {\n\n    /**\n     * Wampy constructor\n     * @param {string} [url]\n     * @param {Object} [options]\n     */\n    constructor (url, options) {\n\n        /**\n         * Wampy version\n         * @type {string}\n         * @private\n         */\n        this.version = 'v7.0.0-rc1';\n\n        /**\n         * WS Url\n         * @type {string}\n         * @private\n         */\n        this._url = (typeof url === 'string') ? url : null;\n\n        /**\n         * WS protocols\n         * @type {Array}\n         * @private\n         */\n        this._protocols = ['wamp.2.json'];\n\n        /**\n         * WAMP features, supported by Wampy\n         * @type {object}\n         * @private\n         */\n        this._wamp_features = {\n            agent: 'Wampy.js ' + this.version,\n            roles: {\n                publisher : {\n                    features: {\n                        subscriber_blackwhite_listing: true,\n                        publisher_exclusion          : true,\n                        publisher_identification     : true,\n                        payload_passthru_mode        : true\n                    }\n                },\n                subscriber: {\n                    features: {\n                        pattern_based_subscription: true,\n                        publication_trustlevels   : true,\n                        publisher_identification  : true,\n                        payload_passthru_mode     : true\n                    }\n                },\n                caller    : {\n                    features: {\n                        caller_identification   : true,\n                        progressive_call_results: true,\n                        call_canceling          : true,\n                        call_timeout            : true,\n                        payload_passthru_mode   : true\n                    }\n                },\n                callee    : {\n                    features: {\n                        caller_identification     : true,\n                        call_trustlevels          : true,\n                        pattern_based_registration: true,\n                        shared_registration       : true,\n                        payload_passthru_mode     : true\n\n                    }\n                }\n            }\n        };\n\n        /**\n         * Internal cache for object lifetime\n         * @type {Object}\n         * @private\n         */\n        this._cache = {\n            /**\n             * WAMP Session ID\n             * @type {string|null}\n             */\n            sessionId: null,\n\n            /**\n             * WAMP Session scope requests ID\n             * @type {int}\n             */\n            reqId: 0,\n\n            /**\n             * Server WAMP roles and features\n             */\n            server_wamp_features: { roles: {} },\n\n            /**\n             * Are we in state of saying goodbye\n             * @type {boolean}\n             */\n            isSayingGoodbye: false,\n\n            /**\n             * Status of last operation\n             */\n            opStatus: {\n\n                /**\n                 * Int code of last operation\n                 * @type {int}\n                 */\n                code: 0,\n\n                /**\n                 * Error of last operation (if not was successful)\n                 * @type {Error}\n                 */\n                error: null,\n\n                /**\n                 * Request ID of last successfully sent operation\n                 * @type {int}\n                 */\n                reqId: 0\n            },\n\n            /**\n             * Timer for reconnection\n             * @type {int|null}\n             */\n            timer: null,\n\n            /**\n             * Reconnection attempts\n             * @type {number}\n             */\n            reconnectingAttempts: 0,\n\n            /**\n             * Promise for onConnect\n             */\n            connectPromise: null,\n\n            /**\n             * Promise for onClose\n             */\n            closePromise: null\n        };\n\n        /**\n         * WebSocket object\n         * @type {WebSocket}\n         * @private\n         */\n        this._ws = null;\n\n        /**\n         * Internal queue for websocket requests, for case of disconnect\n         * @type {Array}\n         * @private\n         */\n        this._wsQueue = [];\n\n        /**\n         * Internal queue for wamp requests\n         * @type {object}\n         * @private\n         */\n        this._requests = {};\n\n        /**\n         * Stored RPC\n         * @type {object}\n         * @private\n         */\n        this._calls = {};\n\n        /**\n         * Stored Pub/Sub\n         * @type {object}\n         * @private\n         */\n        this._subscriptions = {};\n\n        /**\n         * Stored Pub/Sub topics\n         * @type {Set}\n         * @private\n         */\n        this._subsTopics = new Set();\n\n        /**\n         * Stored RPC Registrations\n         * @type {object}\n         * @private\n         */\n        this._rpcRegs = {};\n\n        /**\n         * Stored RPC names\n         * @type {Set}\n         * @private\n         */\n        this._rpcNames = new Set();\n\n        /**\n         * Options hash-table\n         * @type {Object}\n         * @private\n         */\n        this._options = {\n            /**\n             * Logging\n             * @type {boolean}\n             */\n            debug: false,\n\n            /**\n             * Logger\n             * @type {function}\n             */\n            logger: null,\n\n            /**\n             * Reconnecting flag\n             * @type {boolean}\n             */\n            autoReconnect: true,\n\n            /**\n             * Reconnecting interval (in ms)\n             * @type {number}\n             */\n            reconnectInterval: 2 * 1000,\n\n            /**\n             * Maximum reconnection retries\n             * @type {number}\n             */\n            maxRetries: 25,\n\n            /**\n             * WAMP Realm to join\n             * @type {string|null}\n             */\n            realm: null,\n\n            /**\n             * Custom attributes to send to router on hello\n             * @type {object}\n             */\n            helloCustomDetails: null,\n\n            /**\n             * Validation of the topic URI structure\n             * @type {string} - strict or loose\n             */\n            uriValidation: 'strict',\n\n            /**\n             * Authentication id to use in challenge\n             * @type {string|null}\n             */\n            authid: null,\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            authmethods: [],\n\n            /**\n             * Additional authentication options (used in WAMP CryptoSign for example)\n             * @type {object}\n             */\n            authextra: {},\n\n            /**\n             * Authentication helpers for processing different authmethods challenge flows\n             * @type {object}\n             */\n            authPlugins: {},\n\n            /**\n             * Mode of authorization flow\n             * Possible values: manual | auto\n             * @type {string}\n             */\n            authMode: 'manual',\n\n            /**\n             * onChallenge callback\n             * @type {function}\n             */\n            onChallenge: null,\n\n            /**\n             * onClose callback\n             * @type {function}\n             */\n            onClose: null,\n\n            /**\n             * onError callback\n             * @type {function}\n             */\n            onError: null,\n\n            /**\n             * onReconnect callback\n             * @type {function}\n             */\n            onReconnect: null,\n\n            /**\n             * onReconnectSuccess callback\n             * @type {function}\n             */\n            onReconnectSuccess: null,\n\n            /**\n             * User provided WebSocket class\n             * @type {function}\n             */\n            ws: null,\n\n            /**\n             * User provided additional HTTP headers (for use in Node.js enviroment)\n             * @type {object}\n             */\n            additionalHeaders: null,\n\n            /**\n             * User provided WS Client Config Options (for use in Node.js enviroment)\n             * @type {object}\n             */\n            wsRequestOptions: null,\n\n            /**\n             * User provided Serializer class\n             * @type {object}\n             */\n            serializer: jsonSerializer,\n\n            /**\n             * User provided Serializers for Payload Passthru Mode\n             * @type {object}\n             */\n            payloadSerializers: {\n                json: jsonSerializer\n            }\n        };\n\n        if (this._isPlainObject(options)) {\n            this._options = this._merge(this._options, options);\n        } else if (this._isPlainObject(url)) {\n            this._options = this._merge(this._options, url);\n        }\n\n    }\n\n    /* Internal utils methods */\n    /**\n     * Internal logger\n     * @private\n     */\n    _log (...args) {\n        if (this._options.debug) {\n            if (this._options.logger) {\n                this._options.logger(args);\n            } else {\n                console.log('[wampy]', args);\n            }\n        }\n    }\n\n    /**\n     * Get the new unique request id\n     * @returns {number}\n     * @private\n     */\n    _getReqId () {\n        return ++this._cache.reqId;\n    }\n\n    /**\n     * Merge argument objects into one\n     * @returns {Object}\n     * @private\n     */\n    _merge (...args) {\n        const obj = {}, l = args.length;\n        let i, attr;\n\n        for (i = 0; i < l; i++) {\n            for (attr in args[i]) {\n                obj[attr] = args[i][attr];\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Check if value is array\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isArray (obj) {\n        return (!!obj) && (Array.isArray(obj));\n    }\n\n    /**\n     * Check if value is object literal\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isPlainObject (obj) {\n        if (!this._isObject(obj)) {\n            return false;\n        }\n\n        // If obj has modified constructor\n        const ctor = obj.constructor;\n        if (typeof ctor !== 'function') {\n            return false;\n        }\n\n        // If obj has modified prototype\n        const prot = ctor.prototype;\n        if (this._isObject(prot) === false) {\n            return false;\n        }\n\n        // If constructor does not have an Object-specific method\n        return Object.hasOwnProperty.call(prot, 'isPrototypeOf') !== false;\n    }\n\n    /**\n     * Check if value is an object\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isObject (obj) {\n        return obj !== null\n            && typeof obj === 'object'\n            && Array.isArray(obj) === false\n            && Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    /**\n     * Set websocket protocol based on options\n     * @private\n     */\n    _setWsProtocols () {\n        this._protocols = ['wamp.2.' + this._options.serializer.protocol];\n    }\n\n    /**\n     * Fill instance operation status\n     * @param {Error} err\n     * @private\n     */\n    _fillOpStatusByError (err) {\n        this._cache.opStatus = {\n            code: err.code,\n            error: err,\n            reqId: 0\n        };\n    }\n\n    /**\n     * Prerequisite checks for any wampy api call\n     * @param {object} topicType { topic: URI, patternBased: true|false, allowWAMP: true|false }\n     * @param {string} role\n     * @returns {boolean}\n     * @private\n     */\n    _preReqChecks (topicType, role) {\n        let err;\n\n        if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n            switch (role) {\n                case 'dealer':\n                    err = new Errors.NoDealerError();\n                    break;\n                case 'broker':\n                    err = new Errors.NoBrokerError();\n                    break;\n            }\n            this._fillOpStatusByError(err);\n            return false;\n        }\n\n        if (topicType && !this._validateURI(topicType.topic, topicType.patternBased, topicType.allowWAMP)) {\n            this._fillOpStatusByError(new Errors.UriError());\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for specified feature in a role of connected WAMP Router\n     * @param {string} role\n     * @param {string} feature\n     * @returns {boolean}\n     * @private\n     */\n    _checkRouterFeature (role, feature) {\n        return this._cache.server_wamp_features.roles[role].features[feature] === true;\n    }\n\n    /**\n     * Check for PPT mode options correctness\n     * @param {string} role WAMP Router Role to check support\n     * @param {object} options\n     * @returns {boolean}\n     * @private\n     */\n    _checkPPTOptions (role, options) {\n        if (!this._checkRouterFeature(role, 'payload_passthru_mode')) {\n            this._fillOpStatusByError(new Errors.PPTNotSupportedError());\n            return false;\n        }\n\n        if (options.ppt_scheme.search(/^(wamp$|mqtt$|x_)/) < 0) {\n            this._fillOpStatusByError(new Errors.PPTInvalidSchemeError());\n            return false;\n        }\n\n        if (options.ppt_scheme === 'wamp' && !E2EE_SERIALIZERS.includes(options.ppt_serializer)) {\n            this._fillOpStatusByError(new Errors.PPTSerializerInvalidError());\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Validate uri\n     * @param {string} uri\n     * @param {boolean} patternBased\n     * @param {boolean} allowWAMP\n     * @returns {boolean}\n     * @private\n     */\n    _validateURI (uri, patternBased, allowWAMP) {\n        let reBase;\n        let rePattern;\n\n        if (this._options.uriValidation === 'strict') {\n            reBase = /^([0-9a-zA-Z_]+\\.)*([0-9a-zA-Z_]+)$/;\n            rePattern = /^([0-9a-zA-Z_]+\\.{1,2})*([0-9a-zA-Z_]+)$/;\n        } else if (this._options.uriValidation === 'loose') {\n            reBase = /^([^\\s.#]+\\.)*([^\\s.#]+)$/;\n            rePattern = /^([^\\s.#]+\\.{1,2})*([^\\s.#]+)$/;\n        } else {\n            return false;\n        }\n        const re = patternBased ? rePattern : reBase;\n\n        if (allowWAMP) {\n            return re.test(uri);\n        } else {\n            return !(!re.test(uri) || uri.indexOf('wamp.') === 0);\n        }\n    }\n\n    /**\n     * Prepares PPT/E2EE payload for adding to WAMP message\n     * @param {string|number|Array|object} payload\n     * @param {Object} options\n     * @returns {Object}\n     * @private\n     */\n    _packPPTPayload (payload, options) {\n        let payloadItems = [], err = false, argsList, argsDict;\n\n        if (this._isArray(payload)) {\n            argsList = payload;\n        } else if (this._isPlainObject(payload)) {\n            // It's a wampy unified form of payload passing\n            if (payload.argsList || payload.argsDict) {\n                if (this._isArray(payload.argsList)) {\n                    argsList = payload.argsList;\n                } else if (typeof (payload.argsList) !== 'undefined') {\n                    argsList = [payload.argsList];\n                }\n\n                if (payload.argsDict) {\n                    argsDict = payload.argsDict;\n                }\n            } else {\n                argsDict = payload;\n            }\n        } else {    // assume it's a single value\n            argsList = [payload];\n        }\n\n        // Check and handle Payload PassThru Mode\n        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n        if (options.ppt_scheme) {\n            let binPayload, pptPayload = { args: argsList, kwargs: argsDict };\n\n            if (options.ppt_serializer && options.ppt_serializer !== 'native') {\n                let pptSerializer = this._options.payloadSerializers[options.ppt_serializer];\n\n                if (!pptSerializer) {\n                    err = true;\n                    this._fillOpStatusByError(new Errors.PPTSerializerInvalidError());\n                    return { err, payloadItems };\n                }\n\n                try {\n                    binPayload = pptSerializer.encode(pptPayload);\n                } catch (e) {\n                    err = true;\n                    this._fillOpStatusByError(new Errors.PPTSerializationError());\n                    return { err, payloadItems };\n                }\n            } else {\n                binPayload = pptPayload;\n            }\n\n            // wamp scheme means Payload End-to-End Encryption\n            // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-end-to-end-encrypti\n            if (options.ppt_scheme === 'wamp') {\n\n                // TODO: implement End-to-End Encryption\n            }\n\n            payloadItems.push([binPayload]);\n\n        } else {\n            if (argsList) {\n                payloadItems.push(argsList);\n            }\n            if (argsDict) {\n                if (!argsList) {\n                    payloadItems.push([]);\n                }\n                payloadItems.push(argsDict);\n            }\n        }\n\n        return { err, payloadItems };\n    }\n\n    /**\n     * Unpack PPT/E2EE payload to common\n     * @param {string} role\n     * @param {Array} pptPayload\n     * @param {Object} options\n     * @returns {Object}\n     * @private\n     */\n    async _unpackPPTPayload (role, pptPayload, options) {\n        let err = false, decodedPayload;\n\n        if (!this._checkPPTOptions(role, options)) {\n            return { err: this._cache.opStatus.error };\n        }\n\n        // wamp scheme means Payload End-to-End Encryption\n        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-end-to-end-encrypti\n        if (options.ppt_scheme === 'wamp') {\n\n            // TODO: implement End-to-End Encryption\n\n        }\n\n        if (options.ppt_serializer && options.ppt_serializer !== 'native') {\n            let pptSerializer = this._options.payloadSerializers[options.ppt_serializer];\n\n            if (!pptSerializer) {\n                return { err: new Errors.PPTSerializerInvalidError() };\n            }\n\n            try {\n                decodedPayload = await pptSerializer.decode(pptPayload);\n            } catch (e) {\n                return { err: new Errors.PPTSerializationError() };\n            }\n        } else {\n            decodedPayload = pptPayload;\n        }\n        return { err, args: decodedPayload.args, kwargs: decodedPayload.kwargs };\n    }\n\n    /**\n     * Encode WAMP message\n     * @param {Array} msg\n     * @returns {*}\n     * @private\n     */\n    _encode (msg) {\n        try {\n            return this._options.serializer.encode(msg);\n        } catch (e) {\n            this._hardClose('wamp.error.protocol_violation', 'Can not encode message');\n        }\n    }\n\n    /**\n     * Decode WAMP message\n     * @param  msg\n     * @returns {Promise}\n     * @private\n     */\n    _decode (msg) {\n        return this._options.serializer.decode(msg);\n    }\n\n    /**\n     * Hard close of connection due to protocol violations\n     * @param {string} errorUri\n     * @param {string} details\n     * @private\n     */\n    _hardClose (errorUri, details) {\n        this._log(details);\n        // Cleanup outgoing message queue\n        this._wsQueue = [];\n        this._send([WAMP_MSG_SPEC.ABORT, { message: details }, errorUri]);\n\n        // In case we were just making first connection\n        if (this._cache.connectPromise) {\n            this._cache.connectPromise.onError(errorUri);\n            this._cache.connectPromise = null;\n        }\n\n        if (this._options.onError) {\n            this._options.onError({ error: errorUri, details: details });\n        }\n\n        this._ws.close();\n    }\n\n    /**\n     * Send encoded message to server\n     * @param {Array} [msg]\n     * @private\n     */\n    _send (msg) {\n        if (msg) {\n            this._wsQueue.push(this._encode(msg));\n        }\n\n        if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n            while (this._wsQueue.length) {\n                this._ws.send(this._wsQueue.shift());\n            }\n        }\n    }\n\n    /**\n     * Reset internal state and cache\n     * @private\n     */\n    _resetState () {\n        this._wsQueue = [];\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n        this._requests = {};\n        this._calls = {};\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        // Just keep attrs that are have to be present\n        this._cache = {\n            reqId               : 0,\n            reconnectingAttempts: 0,\n            opStatus            : SUCCESS,\n            closePromise        : null,\n            connectPromise      : null,\n        };\n    }\n\n    /**\n     * Initialize internal websocket callbacks\n     * @private\n     */\n    _initWsCallbacks () {\n        if (this._ws) {\n            this._ws.onopen = () => {\n                this._wsOnOpen();\n            };\n            this._ws.onclose = event => {\n                this._wsOnClose(event);\n            };\n            this._ws.onmessage = event => {\n                this._wsOnMessage(event);\n            };\n            this._ws.onerror = error => {\n                this._wsOnError(error);\n            };\n        }\n    }\n\n    /**\n     * Internal websocket on open callback\n     * @private\n     */\n    _wsOnOpen () {\n        const options = this._merge(this._options.helloCustomDetails, this._wamp_features),\n            serverProtocol = this._ws.protocol ? this._ws.protocol.split('.')[2] : '';\n        if (this._options.authid) {\n            options.authmethods = this._options.authmethods;\n            options.authid = this._options.authid;\n            options.authextra = this._options.authextra;\n        }\n\n        this._log('websocket connected');\n\n        if (this._options.serializer.protocol !== serverProtocol) {\n            // Server have chosen not our preferred protocol\n\n            // Falling back to json if possible\n            // Temp hack for React Native Environment is removed as\n            // (facebook/react-native#24796) was resolved\n            if (serverProtocol === 'json') {\n                this._options.serializer = new JsonSerializer();\n            } else {\n                this._fillOpStatusByError(new Errors.NoSerializerAvailableError());\n                return this;\n            }\n\n        }\n\n        if (this._options.serializer.isBinary) {\n            this._ws.binaryType = 'arraybuffer';\n        }\n\n        // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n        // Sending directly 'cause it's a hello msg and no sessionId check is needed\n        this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n    }\n\n    /**\n     * Internal websocket on close callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnClose (event) {\n        this._log('websocket disconnected. Info: ', event);\n\n        // Automatic reconnection\n        if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n            this._options.autoReconnect &&\n            (this._options.maxRetries === 0 ||\n             this._cache.reconnectingAttempts < this._options.maxRetries) &&\n            !this._cache.isSayingGoodbye) {\n            this._cache.sessionId = null;\n            this._cache.timer = setTimeout(() => {\n                this._wsReconnect();\n            }, this._options.reconnectInterval);\n        } else {\n            // No reconnection needed or reached max retries count\n            if (this._options.onClose) {\n                this._options.onClose();\n            } else if (this._cache.closePromise) {\n                this._cache.closePromise.onSuccess();\n                this._cache.closePromise = null;\n            }\n            this._resetState();\n            this._ws = null;\n        }\n    }\n\n    /**\n     * Internal websocket on event callback\n     * @param {object} event\n     * @private\n     */\n    async _wsOnMessage (event) {\n        let data;\n        try {\n            data = await this._decode(event.data);\n        } catch (e) {\n            this._hardClose('wamp.error.protocol_violation', 'Can not decode received message');\n        }\n\n        this._log('websocket message received: ', data);\n\n        let id, i, p, self = this;\n\n        switch (data[0]) {\n            case WAMP_MSG_SPEC.WELCOME:\n                // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n                if (this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received WELCOME message after session was established');\n                } else {\n                    this._cache.sessionId = data[1];\n                    this._cache.server_wamp_features = data[2];\n\n                    if (this._cache.reconnectingAttempts) {\n                        // There was reconnection\n\n                        this._cache.reconnectingAttempts = 0;\n\n                        if (this._options.onReconnectSuccess) {\n                            this._options.onReconnectSuccess(data[2]);\n                        }\n\n                        // Let's renew all previous state\n                        this._renewSubscriptions();\n                        this._renewRegistrations();\n\n                    } else {\n                        // Firing onConnect event on real connection to WAMP server\n                        this._cache.connectPromise.onSuccess(data[2]);\n                        this._cache.connectPromise = null;\n                    }\n\n                    // Send local queue if there is something out there\n                    this._send();\n                }\n                break;\n            case WAMP_MSG_SPEC.ABORT:\n                // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                if (this._options.onError) {\n                    this._options.onError({ error: data[2], details: data[1] });\n                }\n                this._ws.close();\n                break;\n            case WAMP_MSG_SPEC.CHALLENGE:\n                // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n                if (this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received CHALLENGE message after session was established');\n                    break;\n                } else if (this._options.authid &&\n                    this._options.authMode === 'manual' &&\n                    typeof this._options.onChallenge === 'function') {\n\n                    p = new Promise((resolve, reject) => {\n                        resolve(this._options.onChallenge(data[1], data[2]));\n                    });\n\n                } else if (this._options.authid &&\n                    this._options.authMode === 'auto' &&\n                    typeof this._options.authPlugins[data[1]] === 'function') {\n\n                    p = new Promise((resolve, reject) => {\n                        resolve(this._options.authPlugins[data[1]](data[1], data[2]));\n                    });\n\n                } else {\n                    let error = new Errors.NoCRACallbackOrIdError();\n\n                    this._ws.send(this._encode([\n                        WAMP_MSG_SPEC.ABORT,\n                        { message: error.message },\n                        'wamp.error.cannot_authenticate'\n                    ]));\n                    if (this._options.onError) {\n                        this._options.onError({ error });\n                    }\n                    this._ws.close();\n                    this._fillOpStatusByError(error);\n                    break;\n                }\n\n                p.then((key) => {\n\n                    // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                    this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                }).catch(e => {\n                    let error = new Errors.ChallengeExceptionError();\n\n                    this._ws.send(this._encode([\n                        WAMP_MSG_SPEC.ABORT,\n                        { message: error.message },\n                        'wamp.error.cannot_authenticate'\n                    ]));\n                    if (this._options.onError) {\n                        this._options.onError({ error });\n                    }\n                    this._ws.close();\n                    this._fillOpStatusByError(error);\n                });\n\n                break;\n            case WAMP_MSG_SPEC.GOODBYE:\n                // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received GOODBYE message before session was established');\n                } else {\n                    if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                        this._cache.isSayingGoodbye = true;\n                        this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.goodbye_and_out']);\n                    }\n                    this._cache.sessionId = null;\n                    this._ws.close();\n                }\n                break;\n            case WAMP_MSG_SPEC.ERROR:\n                // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received ERROR message before session was established');\n                } else {\n                    switch (data[1]) {\n                        case WAMP_MSG_SPEC.SUBSCRIBE:\n                        case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                        case WAMP_MSG_SPEC.PUBLISH:\n                        case WAMP_MSG_SPEC.REGISTER:\n                        case WAMP_MSG_SPEC.UNREGISTER:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            });\n                            delete this._requests[data[2]];\n\n                            break;\n                        // case WAMP_MSG_SPEC.INVOCATION:\n                        //     break;\n                        case WAMP_MSG_SPEC.CALL:\n\n                            // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                            //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                            this._calls[data[2]] && this._calls[data[2]].onError &&\n                            this._calls[data[2]].onError({\n                                error   : data[4],\n                                details : data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            });\n                            delete this._calls[data[2]];\n\n                            break;\n                        default:\n                            this._hardClose('wamp.error.protocol_violation', 'Received invalid ERROR message');\n                            break;\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.SUBSCRIBED:\n                // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received SUBSCRIBED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                            id             : data[2],\n                            callbacks      : [this._requests[data[1]].callbacks.onEvent],\n                            advancedOptions: this._requests[data[1]].advancedOptions\n                        };\n\n                        this._subsTopics.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic         : this._requests[data[1]].topic,\n                                requestId     : data[1],\n                                subscriptionId: data[2]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received UNSUBSCRIBED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        id = this._subscriptions[this._requests[data[1]].topic].id;\n                        delete this._subscriptions[this._requests[data[1]].topic];\n                        delete this._subscriptions[id];\n\n                        if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                            this._subsTopics.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic    : this._requests[data[1]].topic,\n                                requestId: data[1]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.PUBLISHED:\n                // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received PUBLISHED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic        : this._requests[data[1]].topic,\n                                requestId    : data[1],\n                                publicationId: data[2]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.EVENT:\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received EVENT message before session was established');\n                } else {\n                    if (this._subscriptions[data[1]]) {\n                        let argsList, argsDict, options = data[3];\n\n                        // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                        //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                        // Check and handle Payload PassThru Mode\n                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                        if (options.ppt_scheme) {\n                            let decodedPayload, pptPayload = data[4][0];\n\n                            decodedPayload = await this._unpackPPTPayload('broker', pptPayload, options);\n\n                            if (decodedPayload.err) {\n                                // Since it is async publication, and no link to\n                                // original publication - as it was already published\n                                // we can not reply with error, only log it.\n                                // Although the router should handle it\n                                this._log(decodedPayload.err.message);\n                                break;\n                            }\n\n                            argsList = decodedPayload.args;\n                            argsDict = decodedPayload.kwargs;\n\n                        } else {\n                            argsList = data[4];\n                            argsDict = data[5];\n                        }\n\n                        i = this._subscriptions[data[1]].callbacks.length;\n                        while (i--) {\n                            this._subscriptions[data[1]].callbacks[i]({\n                                details : options,\n                                argsList: argsList,\n                                argsDict: argsDict\n                            });\n                        }\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.RESULT:\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received RESULT message before session was established');\n                } else {\n                    if (this._calls[data[1]]) {\n                        let argsList, argsDict, options = data[2];\n\n                        // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                        //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                        // Check and handle Payload PassThru Mode\n                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                        if (options.ppt_scheme) {\n                            let decodedPayload, pptPayload = data[3][0];\n\n                            decodedPayload = await this._unpackPPTPayload('dealer', pptPayload, options);\n\n                            if (decodedPayload.err) {\n                                this._log(decodedPayload.err.message);\n                                this._cache.opStatus = decodedPayload.err;\n                                this._calls[data[1]].onError({\n                                    error   : decodedPayload.err.message,\n                                    details : data[2],\n                                    argsList: data[3],\n                                    argsDict: data[4]\n                                });\n                                delete this._calls[data[1]];\n                                break;\n                            }\n\n                            argsList = decodedPayload.args;\n                            argsDict = decodedPayload.kwargs;\n\n                        } else {\n                            argsList = data[3];\n                            argsDict = data[4];\n                        }\n\n                        if (options.progress === true) {\n                            this._calls[data[1]].onProgress({\n                                details : options,\n                                argsList: argsList,\n                                argsDict: argsDict\n                            });\n                        } else {\n                            // We received final result (progressive or not)\n                            this._calls[data[1]].onSuccess({\n                                details : options,\n                                argsList: argsList,\n                                argsDict: argsDict\n                            });\n                            delete this._calls[data[1]];\n                        }\n                    }\n                }\n                break;\n            // case WAMP_MSG_SPEC.REGISTER:\n            //     // WAMP SPEC:\n            //     break;\n            case WAMP_MSG_SPEC.REGISTERED:\n                // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received REGISTERED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                            id       : data[2],\n                            callbacks: [this._requests[data[1]].callbacks.rpc]\n                        };\n\n                        this._rpcNames.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic         : this._requests[data[1]].topic,\n                                requestId     : data[1],\n                                registrationId: data[2]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            // case WAMP_MSG_SPEC.UNREGISTER:\n            //     // WAMP SPEC:\n            //     break;\n            case WAMP_MSG_SPEC.UNREGISTERED:\n                // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received UNREGISTERED message before session was established');\n                } else {\n                    if (this._requests[data[1]]) {\n                        id = this._rpcRegs[this._requests[data[1]].topic].id;\n                        delete this._rpcRegs[this._requests[data[1]].topic];\n                        delete this._rpcRegs[id];\n\n                        if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                            this._rpcNames.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess({\n                                topic    : this._requests[data[1]].topic,\n                                requestId: data[1]\n                            });\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                }\n                break;\n            case WAMP_MSG_SPEC.INVOCATION:\n                if (!this._cache.sessionId) {\n                    this._hardClose('wamp.error.protocol_violation',\n                        'Received INVOCATION message before session was established');\n                } else {\n                    if (this._rpcRegs[data[2]]) {\n                        let argsList, argsDict, options = data[3];\n\n                        // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                        //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                        let invoke_error_handler = ({ details, error, argsList, argsDict }) => {\n                                let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                    data[1], details || {}, error || 'wamp.error.invocation_exception'];\n\n                                if (argsList && self._isArray(argsList)) {\n                                    msg.push(argsList);\n                                }\n\n                                if (argsDict && self._isPlainObject(argsDict)) {\n                                    if (msg.length === 5) {\n                                        msg.push([]);\n                                    }\n                                    msg.push(argsDict);\n                                }\n                                self._send(msg);\n                            },\n                            invoke_result_handler = results => {\n                                // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list,\n                                // ArgumentsKw|dict)]\n                                let msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n\n                                if (self._isPlainObject(results)) {\n\n                                    if (self._isPlainObject(results.options)) {\n                                        let options = results.options;\n\n                                        // Check and handle Payload PassThru Mode\n                                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                                        let pptScheme = results.options.ppt_scheme;\n\n                                        if (pptScheme) {\n                                            if (!this._checkPPTOptions('dealer', results.options)) {\n                                                if (this._cache.opStatus.error && this._cache.opStatus.error instanceof Errors.PPTNotSupportedError) {\n                                                    // This case should not happen at all, but for safety\n                                                    this._hardClose('wamp.error.protocol_violation', 'Trying to send YIELD in PPT Mode, while Dealer didn\\'t announce it');\n                                                } else {\n                                                    invoke_error_handler({\n                                                        details : results.options,\n                                                        error   : this._cache.opStatus.error.message,\n                                                        argsList: results.argsList,\n                                                        argsDict: results.argsDict\n                                                    });\n                                                }\n                                                return;\n                                            }\n\n                                            options.ppt_scheme = pptScheme;\n\n                                            if (results.options.ppt_serializer) {\n                                                options.ppt_serializer = results.options.ppt_serializer;\n                                            }\n                                            if (results.options.ppt_cipher) {\n                                                options.ppt_cipher = results.options.ppt_cipher;\n                                            }\n                                            if (results.options.ppt_keyid) {\n                                                options.ppt_keyid = results.options.ppt_keyid;\n                                            }\n                                        }\n\n                                        msg[2] = options;\n                                    }\n\n                                }\n\n                                if (results !== null && typeof (results) !== 'undefined') {\n                                    let res = this._packPPTPayload(results, results.options);\n\n                                    if (res.err) {\n                                        let argsList, argsDict;\n                                        if (!(this._cache.opStatus.error instanceof Errors.PPTSerializationError)) {\n                                            argsList = results.argsList;\n                                            argsDict = results.argsDict;\n                                        }\n                                        invoke_error_handler({\n                                            details : results.options,\n                                            error   : this._cache.opStatus.error.message,\n                                            argsList,\n                                            argsDict\n                                        });\n                                        return;\n                                    }\n                                    msg = msg.concat(res.payloadItems);\n                                }\n\n                                self._send(msg);\n                            };\n\n                        // Check and handle Payload PassThru Mode\n                        // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n                        if (options.ppt_scheme) {\n                            let decodedPayload, pptPayload = data[4][0];\n\n                            decodedPayload = await this._unpackPPTPayload('dealer', pptPayload, options);\n\n                            // This case should not happen at all, but for safety\n                            if (decodedPayload.err && decodedPayload.err instanceof Errors.PPTNotSupportedError) {\n                                this._log(decodedPayload.err.message);\n                                this._hardClose('wamp.error.protocol_violation', 'Received INVOCATION in PPT Mode, while Dealer didn\\'t announce it');\n                                break;\n                            } else if (decodedPayload.err) {\n\n                                this._log(decodedPayload.err.message);\n                                invoke_error_handler({\n                                    details : data[3],\n                                    error   : decodedPayload.err.message,\n                                    argsList: data[4],\n                                    argsDict: data[5]\n                                });\n                                break;\n                            }\n\n                            argsList = decodedPayload.args;\n                            argsDict = decodedPayload.kwargs;\n\n                        } else {\n                            argsList = data[4];\n                            argsDict = data[5];\n                        }\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._rpcRegs[data[2]].callbacks[0]({\n                                details       : options,\n                                argsList      : argsList,\n                                argsDict      : argsDict,\n                                result_handler: invoke_result_handler,\n                                error_handler : invoke_error_handler\n                            }));\n                        });\n\n                        p.then((results) => {\n                            invoke_result_handler(results);\n                        }).catch(e => {\n                            invoke_error_handler(e);\n                        });\n\n                    } else {\n                        // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                        this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                            data[1], {}, 'wamp.error.no_such_procedure']);\n                        this._log(WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION);\n                    }\n                }\n                break;\n            // case WAMP_MSG_SPEC.INTERRUPT:\n            //     // WAMP SPEC:\n            //     break;\n            // case WAMP_MSG_SPEC.YIELD:\n            //     // WAMP SPEC:\n            //     break;\n            default:\n                this._hardClose('wamp.error.protocol_violation', 'Received non-compliant WAMP message');\n                break;\n        }\n    }\n\n    /**\n     * Internal websocket on error callback\n     * @param {object} error\n     * @private\n     */\n    _wsOnError (error) {\n        this._log('websocket error');\n\n        if (this._cache.connectPromise) {\n            this._cache.connectPromise.onError(error);\n            this._cache.connectPromise = null;\n        }\n\n        if (this._options.onError) {\n            this._options.onError({ error });\n        }\n    }\n\n    /**\n     * Reconnect to server in case of websocket error\n     * @private\n     */\n    _wsReconnect () {\n        this._log('websocket reconnecting...');\n\n        if (this._options.onReconnect) {\n            this._options.onReconnect();\n        }\n\n        this._cache.reconnectingAttempts++;\n        this._ws = getWebSocket(this._url, this._protocols, this._options.ws,\n            this._options.additionalHeaders, this._options.wsRequestOptions);\n        this._initWsCallbacks();\n    }\n\n    /**\n     * Resubscribe to topics in case of communication error\n     * @private\n     */\n    _renewSubscriptions () {\n        let i;\n        const subs = this._subscriptions,\n            st = this._subsTopics;\n\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n\n        for (let topic of st) {\n            i = subs[topic].callbacks.length;\n            while (i--) {\n                this.subscribe(topic, subs[topic].callbacks[i], subs[topic].advancedOptions);\n            }\n        }\n    }\n\n    /**\n     * Reregister RPCs in case of communication error\n     * @private\n     */\n    _renewRegistrations () {\n        const rpcs = this._rpcRegs,\n            rn = this._rpcNames;\n\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        for (let rpcName of rn) {\n            this.register(rpcName, rpcs[rpcName].callbacks[0]);\n        }\n    }\n\n    /*************************************************************************\n     * Wampy public API\n     *************************************************************************/\n\n    /**\n     * Get or set Wampy options\n     *\n     * To get options - call without parameters\n     * To set options - pass hash-table with options values\n     *\n     * @param {object} [opts]\n     * @returns {*}\n     */\n    options (opts) {\n        if (typeof (opts) === 'undefined') {\n            return this._options;\n        } else if (this._isPlainObject(opts)) {\n            this._options = this._merge(this._options, opts);\n            return this;\n        }\n    }\n\n    /**\n     * Get the status of last operation\n     *\n     * @returns {object} with 3 fields: code, error, reqId\n     *      code: 0 - if operation was successful\n     *      code > 0 - if error occurred\n     *      error: error instance containing details\n     *      reqId: last successfully sent request ID\n     */\n    getOpStatus () {\n        return this._cache.opStatus;\n    }\n\n    /**\n     * Get the WAMP Session ID\n     *\n     * @returns {string} Session ID\n     */\n    getSessionId () {\n        return this._cache.sessionId;\n    }\n\n    /**\n     * Connect to server\n     * @param {string} [url] New url (optional)\n     * @returns {Promise}\n     */\n    async connect (url) {\n        let error;\n\n        if (url) {\n            this._url = url;\n        }\n\n        if (this._options.realm) {\n\n            const authOpts = (this._options.authid ? 1 : 0) +\n                ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                (typeof this._options.onChallenge === 'function' ||\n                 Object.keys(this._options.authPlugins).length ? 1 : 0);\n\n            if (authOpts > 0 && authOpts < 3) {\n                error = new Errors.NoCRACallbackOrIdError();\n                this._fillOpStatusByError(error);\n                throw error;\n            }\n\n            this._setWsProtocols();\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws,\n                this._options.additionalHeaders, this._options.wsRequestOptions);\n            if (!this._ws) {\n                error = new Errors.NoWsOrUrlError();\n                this._fillOpStatusByError(error);\n                throw error;\n            }\n            this._initWsCallbacks();\n\n        } else {\n            error = new Errors.NoRealmError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        let defer = getNewPromise();\n        this._cache.connectPromise = defer;\n        return defer.promise;\n    }\n\n    /**\n     * Disconnect from server\n     * @returns {Promise}\n     */\n    async disconnect () {\n        if (this._cache.sessionId) {\n            let defer = getNewPromise();\n            this._cache.opStatus = SUCCESS;\n            this._cache.closePromise = defer;\n            // need to send goodbye message to server\n            this._cache.isSayingGoodbye = true;\n            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.system_shutdown']);\n\n            return defer.promise;\n\n        } else if (this._ws) {\n            this._ws.close();\n        }\n\n        return true;\n    }\n\n    /**\n     * Abort WAMP session establishment\n     *\n     * @returns {Wampy}\n     */\n    abort () {\n\n        if (!this._cache.sessionId && this._ws.readyState === 1) {\n            this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n            this._cache.sessionId = null;\n        }\n\n        this._ws.close();\n        this._cache.opStatus = SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Subscribe to a topic on a broker\n     *\n     * @param {string} topicURI\n     * @param {function} onEvent - received event callback\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { match: string matching policy (\"prefix\"|\"wildcard\") }\n     *\n     * @returns {Promise}\n     */\n    async subscribe (topicURI, onEvent, advancedOptions) {\n        let reqId, patternBased = false;\n        const options = {}, callbacks = getNewPromise();\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.prototype.hasOwnProperty.call(advancedOptions, 'match')) {\n                if (/prefix|wildcard/.test(advancedOptions.match)) {\n                    options.match = advancedOptions.match;\n                    patternBased = true;\n                } else {\n                    let error = new Errors.InvalidParamError();\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        // Need to be placed here as patternBased flag is determined above\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: true },\n            'broker')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (typeof onEvent === 'function') {\n            callbacks.onEvent = onEvent;\n        } else {\n            let error = new Errors.NoCallbackError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n            // no such subscription or processing unsubscribing\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks,\n                advancedOptions\n            };\n\n            // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n            this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, options, topicURI]);\n\n        } else {    // already have subscription to this topic\n            // There is no such callback yet\n            if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n            }\n\n            return {\n                topic: topicURI,\n                subscriptionId: this._subscriptions[topicURI].id\n            };\n        }\n\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * Unsubscribe from topic\n     * @param {string} topicURI\n     * @param {function} [onEvent] - received event callback to remove (optional). If not provided -\n     *                               all callbacks will be removed and unsubscribed on the server\n     * @returns {Promise}\n     */\n    async unsubscribe (topicURI, onEvent) {\n        let reqId;\n        const callbacks = getNewPromise();\n\n        if (!this._preReqChecks(null, 'broker')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (this._subscriptions[topicURI]) {\n\n            reqId = this._getReqId();\n\n            if (typeof onEvent === 'function') {\n                let i = this._subscriptions[topicURI].callbacks.indexOf(onEvent);\n                if (i >= 0) {\n                    this._subscriptions[topicURI].callbacks.splice(i, 1);\n                }\n            } else {\n                this._subscriptions[topicURI].callbacks = [];\n            }\n\n            if (this._subscriptions[topicURI].callbacks.length) {\n                // There are another callbacks for this topic\n                this._cache.opStatus = SUCCESS;\n                return true;\n            }\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n            this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n        } else {\n            let error = new Errors.NonExistUnsubscribeError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * Publish an event to the topic\n     * @param {string} topicURI\n     * @param {string|number|Array|object} [payload] - can be either a value of any type or null or even omitted.\n     *                          Also, it is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n     *                                      even though they may be subscribed\n     *                            exclude_authid: string|array Authentication id(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            exclude_authrole: string|array Authentication role(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            eligible: integer|array WAMP session id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authid: string|array Authentication id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authrole: string|array Authentication role(s) that are allowed\n     *                                      to receive a published event\n     *                            exclude_me: bool flag of receiving publishing event by initiator\n     *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n     *                                      to receivers of a published event }\n     * @returns {Promise}\n     */\n    async publish (topicURI, payload, advancedOptions) {\n        let reqId, msg;\n        const options = { acknowledge: true }, callbacks = getNewPromise(),\n            _optionsConvertHelper = (option, sourceType) => {\n                if (advancedOptions[option]) {\n                    if (this._isArray(advancedOptions[option]) && advancedOptions[option].length) {\n                        options[option] = advancedOptions[option];\n                    } else if (typeof advancedOptions[option] === sourceType) {\n                        options[option] = [advancedOptions[option]];\n                    } else {\n                        return false;\n                    }\n                }\n\n                return true;\n            };\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'broker')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (!_optionsConvertHelper('exclude', 'number') ||\n                !_optionsConvertHelper('exclude_authid', 'string') ||\n                !_optionsConvertHelper('exclude_authrole', 'string') ||\n                !_optionsConvertHelper('eligible', 'number') ||\n                !_optionsConvertHelper('eligible_authid', 'string') ||\n                !_optionsConvertHelper('eligible_authrole', 'string')) {\n\n                let error = new Errors.InvalidParamError();\n                this._fillOpStatusByError(error);\n                throw error;\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'exclude_me')) {\n                options.exclude_me = advancedOptions.exclude_me !== false;\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'disclose_me')) {\n                options.disclose_me = advancedOptions.disclose_me === true;\n            }\n\n            // Check and handle Payload PassThru Mode\n            // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n            let pptScheme = advancedOptions.ppt_scheme;\n\n            if (pptScheme) {\n                if (!this._checkPPTOptions('broker', advancedOptions)) {\n                    throw this._cache.opStatus.error;\n                }\n\n                options.ppt_scheme = pptScheme;\n\n                if (advancedOptions.ppt_serializer) {\n                    options.ppt_serializer = advancedOptions.ppt_serializer;\n                }\n                if (advancedOptions.ppt_cipher) {\n                    options.ppt_cipher = advancedOptions.ppt_cipher;\n                }\n                if (advancedOptions.ppt_keyid) {\n                    options.ppt_keyid = advancedOptions.ppt_keyid;\n                }\n            }\n\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        reqId = this._getReqId();\n\n        this._requests[reqId] = {\n            topic: topicURI,\n            callbacks\n        };\n\n        // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n\n        if (arguments.length > 1) {\n            // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n            let res = this._packPPTPayload(payload, options);\n\n            if (res.err) {\n                throw this._cache.opStatus.error;\n            }\n            msg = msg.concat(res.payloadItems);\n        }\n\n        this._send(msg);\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * Remote Procedure Call\n     * @param {string} topicURI\n     * @param {string|number|Array|object} [payload] - can be either a value of any type or null. Also, it\n     *                          is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { disclose_me:      bool flag of disclosure of Caller identity (WAMP session ID)\n     *                                              to endpoints of a routed call\n     *                            progress_callback: function for handling progressive call results\n     *                            timeout:          integer timeout (in ms) for the call to finish\n     *                          }\n     * @returns {Promise}\n     */\n    async call (topicURI, payload, advancedOptions) {\n        let reqId, msg;\n        const options = {}, callbacks = getNewPromise();\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: true }, 'dealer')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.hasOwnProperty.call(advancedOptions, 'disclose_me')) {\n                options.disclose_me = advancedOptions.disclose_me === true;\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'progress_callback')) {\n                if (typeof advancedOptions.progress_callback === 'function') {\n                    options.receive_progress = true;\n                    callbacks.onProgress = advancedOptions.progress_callback;\n                } else {\n                    let error = new Errors.InvalidParamError();\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'timeout')) {\n                if (typeof advancedOptions.timeout === 'number') {\n                    options.timeout = advancedOptions.timeout;\n                } else {\n                    let error = new Errors.InvalidParamError();\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n            // Check and handle Payload PassThru Mode\n            // @see https://wamp-proto.org/wamp_latest_ietf.html#name-payload-passthru-mode\n            let pptScheme = advancedOptions.ppt_scheme;\n\n            if (pptScheme) {\n                if (!this._checkPPTOptions('dealer', advancedOptions)) {\n                    throw this._cache.opStatus.error;\n                }\n\n                options.ppt_scheme = pptScheme;\n\n                if (advancedOptions.ppt_serializer) {\n                    options.ppt_serializer = advancedOptions.ppt_serializer;\n                }\n                if (advancedOptions.ppt_cipher) {\n                    options.ppt_cipher = advancedOptions.ppt_cipher;\n                }\n                if (advancedOptions.ppt_keyid) {\n                    options.ppt_keyid = advancedOptions.ppt_keyid;\n                }\n            }\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        do {\n            reqId = this._getReqId();\n        } while (reqId in this._calls);\n\n        this._calls[reqId] = callbacks;\n\n        // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n        msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n\n        if (payload !== null && typeof (payload) !== 'undefined') {\n            let res = this._packPPTPayload(payload, options);\n\n            if (res.err) {\n                throw this._cache.opStatus.error;\n            }\n            msg = msg.concat(res.payloadItems);\n        }\n\n        this._send(msg);\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return callbacks.promise;\n    }\n\n    /**\n     * RPC invocation cancelling\n     *\n     * @param {int} reqId RPC call request ID\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          { mode: string|one of the possible modes:\n     *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n     *                          }\n     *\n     * @returns {Boolean}\n     */\n    cancel (reqId, advancedOptions) {\n        const options = {};\n\n        if (!this._preReqChecks(null, 'dealer')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (!reqId || !this._calls[reqId]) {\n            let error = new Errors.NonExistRPCReqIdError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.hasOwnProperty.call(advancedOptions, 'mode')) {\n                if (/skip|kill|killnowait/.test(advancedOptions.mode)) {\n                    options.mode = advancedOptions.mode;\n                } else {\n                    let error = new Errors.InvalidParamError();\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n        this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n        this._cache.opStatus = SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n\n        return true;\n    }\n\n    /**\n     * RPC registration for invocation\n     * @param {string} topicURI\n     * @param {function} rpc - rpc that will receive invocations\n     * @param {object} [advancedOptions] - optional parameter. Must include any or all of the options:\n     *                          {\n     *                              match: string matching policy (\"prefix\"|\"wildcard\")\n     *                              invoke: string invocation policy (\"single\"|\"roundrobin\"|\"random\"|\"first\"|\"last\")\n     *                          }\n     * @returns {Promise}\n     */\n    async register (topicURI, rpc, advancedOptions) {\n        let reqId, patternBased = false;\n        const options = {}, callbacks = getNewPromise();\n\n        if (this._isPlainObject(advancedOptions)) {\n            if (Object.hasOwnProperty.call(advancedOptions, 'match')) {\n                if (/prefix|wildcard/.test(advancedOptions.match)) {\n                    options.match = advancedOptions.match;\n                    patternBased = true;\n                } else {\n                    let error = new Errors.InvalidParamError();\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n            if (Object.hasOwnProperty.call(advancedOptions, 'invoke')) {\n                if (/single|roundrobin|random|first|last/.test(advancedOptions.invoke)) {\n                    options.invoke = advancedOptions.invoke;\n                } else {\n                    let error = new Errors.InvalidParamError();\n                    this._fillOpStatusByError(error);\n                    throw error;\n                }\n            }\n\n        } else if (typeof (advancedOptions) !== 'undefined') {\n            let error = new Errors.InvalidParamError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        // Need to be placed here as patternBased flag is determined above\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: false },\n            'dealer')) {\n            throw this._cache.opStatus.error;\n        }\n\n        if (typeof rpc === 'function') {\n            callbacks.rpc = rpc;\n        } else {\n            let error = new Errors.NoCallbackError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n            // no such registration or processing unregistering\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n            this._send([WAMP_MSG_SPEC.REGISTER, reqId, options, topicURI]);\n            this._cache.opStatus = SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // already have registration with such topicURI\n            let error = new Errors.RPCAlreadyRegisteredError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        return callbacks.promise;\n    }\n\n    /**\n     * RPC unregistration for invocation\n     * @param {string} topicURI\n     * @returns {Promise}\n     */\n    async unregister (topicURI) {\n        let reqId;\n        const callbacks = getNewPromise();\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'dealer')) {\n            throw this._cache.opStatus.error;        }\n\n        if (this._rpcRegs[topicURI]) {   // there is such registration\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n            this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n            this._cache.opStatus = SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // there is no registration with such topicURI\n            let error = new Errors.NonExistRPCUnregistrationError();\n            this._fillOpStatusByError(error);\n            throw error;\n        }\n\n        return callbacks.promise;\n    }\n}\n\nexport default Wampy;\nexport { Wampy, Errors };\n"],"mappings":"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"}
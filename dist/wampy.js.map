{"version":3,"sources":["../src/wampy.js"],"names":["Wampy","url","options","version","_url","_protocols","_wamp_features","agent","roles","publisher","features","subscriber_blackwhite_listing","publisher_exclusion","publisher_identification","subscriber","pattern_based_subscription","publication_trustlevels","caller","caller_identification","progressive_call_results","call_canceling","call_timeout","callee","call_trustlevels","pattern_based_registration","shared_registration","_cache","sessionId","reqId","server_wamp_features","isSayingGoodbye","opStatus","code","description","timer","reconnectingAttempts","_ws","_wsQueue","_requests","_calls","_subscriptions","_subsTopics","Set","_rpcRegs","_rpcNames","_options","debug","autoReconnect","reconnectInterval","maxRetries","realm","helloCustomDetails","uriValidation","authid","authmethods","onChallenge","onConnect","onClose","onError","onReconnect","onReconnectSuccess","ws","additionalHeaders","wsRequestOptions","serializer","JsonSerializer","_isPlainObject","_merge","connect","args","console","log","obj","l","length","i","attr","Array","isArray","_isObject","ctor","constructor","prot","prototype","hasOwnProperty","Object","toString","call","unshift","protocol","topicType","role","callbacks","flag","WAMP_ERROR_MSG","toUpperCase","_validateURI","topic","patternBased","allowWAMP","URI_ERROR","error","uri","reBase","rePattern","re","test","indexOf","msg","encode","e","_hardClose","decode","errorUri","details","_log","_send","WAMP_MSG_SPEC","ABORT","message","close","push","_encode","readyState","send","shift","onopen","_wsOnOpen","onclose","event","_wsOnClose","onmessage","_wsOnMessage","onerror","_wsOnError","serverProtocol","split","navigator","product","NO_SERIALIZER_AVAILABLE","isBinary","binaryType","HELLO","setTimeout","_wsReconnect","_resetState","_decode","data","then","id","p","self","WELCOME","_renewSubscriptions","_renewRegistrations","CHALLENGE","Promise","resolve","reject","key","AUTHENTICATE","CRA_EXCEPTION","NO_CRA_CB_OR_ID","GOODBYE","ERROR","SUBSCRIBE","UNSUBSCRIBE","PUBLISH","REGISTER","UNREGISTER","argsList","argsDict","CALL","SUBSCRIBED","onEvent","advancedOptions","add","onSuccess","UNSUBSCRIBED","has","PUBLISHED","EVENT","RESULT","progress","REGISTERED","rpc","UNREGISTERED","INVOCATION","invoke_result_handler","results","YIELD","_isArray","invoke_error_handler","result_handler","error_handler","NON_EXIST_RPC_INVOCATION","err","_initWsCallbacks","subs","st","subscribe","rpcs","rn","rpcName","register","opts","authp","_setWsProtocols","NO_WS_OR_URL","NO_REALM","SUCCESS","topicURI","match","_preReqChecks","NO_CALLBACK_SPEC","_getReqId","splice","NON_EXIST_UNSUBSCRIBE","payload","hasPayload","_optionsConvertHelper","option","sourceType","acknowledge","exclude_me","disclose_me","INVALID_PARAM","arguments","receive_progress","timeout","NON_EXIST_RPC_REQ_ID","mode","CANCEL","invoke","RPC_ALREADY_REGISTERED","NON_EXIST_RPC_UNREG"],"mappings":"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","sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\nimport { WAMP_MSG_SPEC, WAMP_ERROR_MSG } from './constants';\nimport { getWebSocket } from './utils';\nimport { JsonSerializer } from './serializers/JsonSerializer';\n\n/**\n * WAMP Client Class\n */\nclass Wampy {\n\n    /**\n     * Wampy constructor\n     * @param {string} [url]\n     * @param {Object} [options]\n     */\n    constructor (url, options) {\n\n        /**\n         * Wampy version\n         * @type {string}\n         * @private\n         */\n        this.version = 'v6.2.2';\n\n        /**\n         * WS Url\n         * @type {string}\n         * @private\n         */\n        this._url = (typeof url === 'string') ? url : null;\n\n        /**\n         * WS protocols\n         * @type {Array}\n         * @private\n         */\n        this._protocols = ['wamp.2.json'];\n\n        /**\n         * WAMP features, supported by Wampy\n         * @type {object}\n         * @private\n         */\n        this._wamp_features = {\n            agent: 'Wampy.js ' + this.version,\n            roles: {\n                publisher : {\n                    features: {\n                        subscriber_blackwhite_listing: true,\n                        publisher_exclusion          : true,\n                        publisher_identification     : true\n                    }\n                },\n                subscriber: {\n                    features: {\n                        pattern_based_subscription: true,\n                        publication_trustlevels   : true\n                    }\n                },\n                caller    : {\n                    features: {\n                        caller_identification   : true,\n                        progressive_call_results: true,\n                        call_canceling          : true,\n                        call_timeout            : true\n                    }\n                },\n                callee    : {\n                    features: {\n                        caller_identification     : true,\n                        call_trustlevels          : true,\n                        pattern_based_registration: true,\n                        shared_registration       : true\n                    }\n                }\n            }\n        };\n\n        /**\n         * Internal cache for object lifetime\n         * @type {Object}\n         * @private\n         */\n        this._cache = {\n            /**\n             * WAMP Session ID\n             * @type {string}\n             */\n            sessionId: null,\n\n            /**\n             * WAMP Session scope requests ID\n             * @type {int}\n             */\n            reqId: 0,\n\n            /**\n             * Server WAMP roles and features\n             */\n            server_wamp_features: { roles: {} },\n\n            /**\n             * Are we in state of saying goodbye\n             * @type {boolean}\n             */\n            isSayingGoodbye: false,\n\n            /**\n             * Status of last operation\n             */\n            opStatus: { code: 0, description: 'Success!', reqId: 0 },\n\n            /**\n             * Timer for reconnection\n             * @type {null}\n             */\n            timer: null,\n\n            /**\n             * Reconnection attempts\n             * @type {number}\n             */\n            reconnectingAttempts: 0\n        };\n\n        /**\n         * WebSocket object\n         * @type {Object}\n         * @private\n         */\n        this._ws = null;\n\n        /**\n         * Internal queue for websocket requests, for case of disconnect\n         * @type {Array}\n         * @private\n         */\n        this._wsQueue = [];\n\n        /**\n         * Internal queue for wamp requests\n         * @type {object}\n         * @private\n         */\n        this._requests = {};\n\n        /**\n         * Stored RPC\n         * @type {object}\n         * @private\n         */\n        this._calls = {};\n\n        /**\n         * Stored Pub/Sub\n         * @type {object}\n         * @private\n         */\n        this._subscriptions = {};\n\n        /**\n         * Stored Pub/Sub topics\n         * @type {Array}\n         * @private\n         */\n        this._subsTopics = new Set();\n\n        /**\n         * Stored RPC Registrations\n         * @type {object}\n         * @private\n         */\n        this._rpcRegs = {};\n\n        /**\n         * Stored RPC names\n         * @type {Array}\n         * @private\n         */\n        this._rpcNames = new Set();\n\n        /**\n         * Options hash-table\n         * @type {Object}\n         * @private\n         */\n        this._options = {\n            /**\n             * Logging\n             * @type {boolean}\n             */\n            debug: false,\n\n            /**\n             * Reconnecting flag\n             * @type {boolean}\n             */\n            autoReconnect: true,\n\n            /**\n             * Reconnecting interval (in ms)\n             * @type {number}\n             */\n            reconnectInterval: 2 * 1000,\n\n            /**\n             * Maximum reconnection retries\n             * @type {number}\n             */\n            maxRetries: 25,\n\n            /**\n             * WAMP Realm to join\n             * @type {string}\n             */\n            realm: null,\n\n            /**\n             * Custom attributes to send to router on hello\n             * @type {object}\n             */\n            helloCustomDetails: null,\n\n            /**\n             * Validation of the topic URI structure\n             * @type {string} - strict or loose\n             */\n            uriValidation: 'strict',\n\n            /**\n             * Authentication id to use in challenge\n             * @type {string}\n             */\n            authid: null,\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            authmethods: [],\n\n            /**\n             * onChallenge callback\n             * @type {function}\n             */\n            onChallenge: null,\n\n            /**\n             * onConnect callback\n             * @type {function}\n             */\n            onConnect: null,\n\n            /**\n             * onClose callback\n             * @type {function}\n             */\n            onClose: null,\n\n            /**\n             * onError callback\n             * @type {function}\n             */\n            onError: null,\n\n            /**\n             * onReconnect callback\n             * @type {function}\n             */\n            onReconnect: null,\n\n            /**\n             * onReconnectSuccess callback\n             * @type {function}\n             */\n            onReconnectSuccess: null,\n\n            /**\n             * User provided WebSocket class\n             * @type {function}\n             */\n            ws: null,\n\n            /**\n             * User provided additional HTTP headers (for use in Node.js enviroment)\n             * @type {object}\n             */\n            additionalHeaders: null,\n\n            /**\n             * User provided WS Client Config Options (for use in Node.js enviroment)\n             * @type {object}\n             */\n            wsRequestOptions: null,\n\n            /**\n             * User provided msgpack class\n             * @type {object}\n             */\n            serializer: new JsonSerializer()\n        };\n\n        if (this._isPlainObject(options)) {\n            this._options = this._merge(this._options, options);\n        } else if (this._isPlainObject(url)) {\n            this._options = this._merge(this._options, url);\n        }\n\n        if (this._url) {\n            this.connect();\n        }\n\n    }\n\n    /* Internal utils methods */\n    /**\n     * Internal logger\n     * @private\n     */\n    _log (...args) {\n        if (this._options.debug) {\n            console.log(args);\n        }\n    }\n\n    /**\n     * Get the new unique request id\n     * @returns {number}\n     * @private\n     */\n    _getReqId () {\n        return ++this._cache.reqId;\n    }\n\n    /**\n     * Merge argument objects into one\n     * @returns {Object}\n     * @private\n     */\n    _merge (...args) {\n        const obj = {}, l = args.length;\n        let i, attr;\n\n        for (i = 0; i < l; i++) {\n            for (attr in args[i]) {\n                obj[attr] = args[i][attr];\n            }\n        }\n\n        return obj;\n    }\n\n    /**\n     * Check if value is array\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isArray (obj) {\n        return (!!obj) && (Array.isArray(obj));\n    }\n\n    /**\n     * Check if value is object literal\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isPlainObject (obj) {\n        if (!this._isObject(obj)) {\n            return false;\n        }\n\n        // If has modified constructor\n        const ctor = obj.constructor;\n        if (typeof ctor !== 'function') {\n            return false;\n        }\n\n        // If has modified prototype\n        const prot = ctor.prototype;\n        if (this._isObject(prot) === false) {\n            return false;\n        }\n\n        // If constructor does not have an Object-specific method\n        if (prot.hasOwnProperty('isPrototypeOf') === false) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if value is an object\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isObject (obj) {\n        return obj !== null\n            && typeof obj === 'object'\n            && Array.isArray(obj) === false\n            && Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    /**\n     * Fix websocket protocols based on options\n     * @private\n     */\n    _setWsProtocols () {\n        if (!(this._options.serializer instanceof JsonSerializer)) {\n            this._protocols.unshift('wamp.2.' + this._options.serializer.protocol);\n        }\n    }\n\n    /**\n     * Prerequisite checks for any wampy api call\n     * @param {object} topicType { topic: URI, patternBased: true|false, allowWAMP: true|false }\n     * @param {string} role\n     * @param {object} callbacks\n     * @returns {boolean}\n     * @private\n     */\n    _preReqChecks (topicType, role, callbacks) {\n        let flag = true;\n\n        if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n            this._cache.opStatus = WAMP_ERROR_MSG['NO_' + role.toUpperCase()];\n            flag = false;\n        }\n\n        if (topicType && !this._validateURI(topicType.topic, topicType.patternBased, topicType.allowWAMP)) {\n            this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n            flag = false;\n        }\n\n        if (flag) {\n            return true;\n        }\n\n        if (this._isPlainObject(callbacks) && callbacks.onError) {\n            callbacks.onError({ error: this._cache.opStatus.description });\n        }\n\n        return false;\n    }\n\n    /**\n     * Validate uri\n     * @param {string} uri\n     * @param {boolean} patternBased\n     * @param {boolean} allowWAMP\n     * @returns {boolean}\n     * @private\n     */\n    _validateURI (uri, patternBased, allowWAMP) {\n        let reBase;\n        let rePattern;\n\n        if (this._options.uriValidation === 'strict') {\n            reBase = /^([0-9a-zA-Z_]+\\.)*([0-9a-zA-Z_]+)$/;\n            rePattern = /^([0-9a-zA-Z_]+\\.{1,2})*([0-9a-zA-Z_]+)$/;\n        } else if (this._options.uriValidation === 'loose') {\n            reBase = /^([^\\s.#]+\\.)*([^\\s.#]+)$/;\n            rePattern = /^([^\\s.#]+\\.{1,2})*([^\\s.#]+)$/;\n        } else {\n            return false;\n        }\n        const re = patternBased ? rePattern : reBase;\n\n        if (allowWAMP) {\n            return re.test(uri);\n        } else {\n            return !(!re.test(uri) || uri.indexOf('wamp.') === 0);\n        }\n    }\n\n    /**\n     * Encode WAMP message\n     * @param {Array} msg\n     * @returns {*}\n     * @private\n     */\n    _encode (msg) {\n        try {\n            return this._options.serializer.encode(msg);\n        } catch (e) {\n            this._hardClose('wamp.error.protocol_violation', 'Can not encode message');\n        }\n    }\n\n    /**\n     * Decode WAMP message\n     * @param  msg\n     * @returns {Promise}\n     * @private\n     */\n    _decode (msg) {\n        return this._options.serializer.decode(msg);\n    }\n\n    /**\n     * Hard close of connection due to protocol violations\n     * @param {string} errorUri\n     * @param {string} details\n     * @private\n     */\n    _hardClose (errorUri, details) {\n        this._log('[wampy] ' + details);\n        // Cleanup outgoing message queue\n        this._wsQueue = [];\n        this._send([WAMP_MSG_SPEC.ABORT, { message: details }, errorUri]);\n\n        if (this._options.onError) {\n            this._options.onError({ error: errorUri, details: details });\n        }\n        this._ws.close();\n    }\n\n    /**\n     * Send encoded message to server\n     * @param {Array} msg\n     * @private\n     */\n    _send (msg) {\n        if (msg) {\n            this._wsQueue.push(this._encode(msg));\n        }\n\n        if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n            while (this._wsQueue.length) {\n                this._ws.send(this._wsQueue.shift());\n            }\n        }\n    }\n\n    /**\n     * Reset internal state and cache\n     * @private\n     */\n    _resetState () {\n        this._wsQueue = [];\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n        this._requests = {};\n        this._calls = {};\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        // Just keep attrs that are have to be present\n        this._cache = {\n            reqId               : 0,\n            reconnectingAttempts: 0\n        };\n    }\n\n    /**\n     * Initialize internal websocket callbacks\n     * @private\n     */\n    _initWsCallbacks () {\n        if (this._ws) {\n            this._ws.onopen = () => {\n                this._wsOnOpen();\n            };\n            this._ws.onclose = event => {\n                this._wsOnClose(event);\n            };\n            this._ws.onmessage = event => {\n                this._wsOnMessage(event);\n            };\n            this._ws.onerror = error => {\n                this._wsOnError(error);\n            };\n        }\n    }\n\n    /**\n     * Internal websocket on open callback\n     * @private\n     */\n    _wsOnOpen () {\n        const options = this._merge(this._options.helloCustomDetails, this._wamp_features),\n            serverProtocol = this._ws.protocol ? this._ws.protocol.split('.')[2] : '';\n\n        if (this._options.authid) {\n            options.authmethods = this._options.authmethods;\n            options.authid = this._options.authid;\n        }\n\n        this._log('[wampy] websocket connected');\n\n        if (this._options.serializer.protocol !== serverProtocol) {\n            // Server have chosen not our preferred protocol\n\n            // Falling back to json if possible\n            //FIXME Temp hack for React Native Environment.\n            // Due to bug (facebook/react-native#24796), it doesn't provide selected subprotocol.\n            // Remove when ^^^ bug will be fixed.\n            if (serverProtocol === 'json' ||\n                (typeof navigator != 'undefined' &&\n                    navigator.product === 'ReactNative' &&\n                    typeof this._ws.protocol === 'undefined')) {\n                this._options.serializer = new JsonSerializer();\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_SERIALIZER_AVAILABLE;\n                return this;\n            }\n\n        }\n\n        if (this._options.serializer.isBinary) {\n            this._ws.binaryType = 'arraybuffer';\n        }\n\n        // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n        // Sending directly 'cause it's a hello msg and no sessionId check is needed\n        this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n    }\n\n    /**\n     * Internal websocket on close callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnClose (event) {\n        this._log('[wampy] websocket disconnected. Info: ', event);\n\n        // Automatic reconnection\n        if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n            this._options.autoReconnect && this._cache.reconnectingAttempts < this._options.maxRetries && !this._cache.isSayingGoodbye) {\n            this._cache.sessionId = null;\n            this._cache.timer = setTimeout(() => {\n                this._wsReconnect();\n            }, this._options.reconnectInterval);\n        } else {\n            // No reconnection needed or reached max retries count\n            if (this._options.onClose) {\n                this._options.onClose();\n            }\n\n            this._resetState();\n            this._ws = null;\n        }\n    }\n\n    /**\n     * Internal websocket on event callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnMessage (event) {\n        this._decode(event.data).then(data => {\n\n            this._log('[wampy] websocket message received: ', data);\n\n            let id, i, p, self = this;\n\n            switch (data[0]) {\n                case WAMP_MSG_SPEC.WELCOME:\n                    // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n                    if (this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received WELCOME message after session was established');\n                    } else {\n                        this._cache.sessionId = data[1];\n                        this._cache.server_wamp_features = data[2];\n\n                        if (this._cache.reconnectingAttempts) {\n                            // There was reconnection\n\n                            this._cache.reconnectingAttempts = 0;\n\n                            if (this._options.onReconnectSuccess) {\n                                this._options.onReconnectSuccess(data[2]);\n                            }\n\n                            // Let's renew all previous state\n                            this._renewSubscriptions();\n                            this._renewRegistrations();\n\n                        } else {\n                            // Firing onConnect event on real connection to WAMP server\n                            if (this._options.onConnect) {\n                                this._options.onConnect(data[2]);\n                            }\n                        }\n\n                        // Send local queue if there is something out there\n                        this._send();\n                    }\n                    break;\n                case WAMP_MSG_SPEC.ABORT:\n                    // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                    if (this._options.onError) {\n                        this._options.onError({ error: data[2], details: data[1] });\n                    }\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.CHALLENGE:\n                    // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n                    if (this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received CHALLENGE message after session was established');\n                    } else {\n                        if (this._options.authid && typeof this._options.onChallenge === 'function') {\n\n                            p = new Promise((resolve, reject) => {\n                                resolve(this._options.onChallenge(data[1], data[2]));\n                            });\n\n                            p.then((key) => {\n\n                                // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                                this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                            }).catch(e => {\n                                this._ws.send(this._encode([\n                                    WAMP_MSG_SPEC.ABORT,\n                                    { message: 'Exception in onChallenge handler raised!' },\n                                    'wamp.error.cannot_authenticate'\n                                ]));\n                                if (this._options.onError) {\n                                    this._options.onError({ error: WAMP_ERROR_MSG.CRA_EXCEPTION.description });\n                                }\n                                this._ws.close();\n                                this._cache.opStatus = WAMP_ERROR_MSG.CRA_EXCEPTION;\n                            });\n\n                        } else {\n\n                            this._ws.send(this._encode([\n                                WAMP_MSG_SPEC.ABORT,\n                                { message: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description },\n                                'wamp.error.cannot_authenticate'\n                            ]));\n                            if (this._options.onError) {\n                                this._options.onError({ error: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description });\n                            }\n                            this._ws.close();\n                            this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.GOODBYE:\n                    // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received GOODBYE message before session was established');\n                    } else {\n                        if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                            this._cache.isSayingGoodbye = true;\n                            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.goodbye_and_out']);\n                        }\n                        this._cache.sessionId = null;\n                        this._ws.close();\n                    }\n                    break;\n                case WAMP_MSG_SPEC.ERROR:\n                    // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                    //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received ERROR message before session was established');\n                    } else {\n                        switch (data[1]) {\n                            case WAMP_MSG_SPEC.SUBSCRIBE:\n                            case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                            case WAMP_MSG_SPEC.PUBLISH:\n                            case WAMP_MSG_SPEC.REGISTER:\n                            case WAMP_MSG_SPEC.UNREGISTER:\n\n                                this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                                this._requests[data[2]].callbacks.onError({\n                                    error   : data[4],\n                                    details : data[3],\n                                    argsList: data[5],\n                                    argsDict: data[6]\n                                });\n                                delete this._requests[data[2]];\n\n                                break;\n                            // case WAMP_MSG_SPEC.INVOCATION:\n                            //     break;\n                            case WAMP_MSG_SPEC.CALL:\n\n                                // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                                //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                                this._calls[data[2]] && this._calls[data[2]].onError &&\n                                this._calls[data[2]].onError({\n                                    error   : data[4],\n                                    details : data[3],\n                                    argsList: data[5],\n                                    argsDict: data[6]\n                                });\n                                delete this._calls[data[2]];\n\n                                break;\n                            default:\n                                this._hardClose('wamp.error.protocol_violation', 'Received invalid ERROR message');\n                                break;\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.SUBSCRIBED:\n                    // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received SUBSCRIBED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                                id             : data[2],\n                                callbacks      : [this._requests[data[1]].callbacks.onEvent],\n                                advancedOptions: this._requests[data[1]].advancedOptions\n                            };\n\n                            this._subsTopics.add(this._requests[data[1]].topic);\n\n                            if (this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                    // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received UNSUBSCRIBED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            id = this._subscriptions[this._requests[data[1]].topic].id;\n                            delete this._subscriptions[this._requests[data[1]].topic];\n                            delete this._subscriptions[id];\n\n                            if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                                this._subsTopics.delete(this._requests[data[1]].topic);\n                            }\n\n                            if (this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.PUBLISHED:\n                    // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received PUBLISHED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.EVENT:\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received EVENT message before session was established');\n                    } else {\n                        if (this._subscriptions[data[1]]) {\n\n                            // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                            //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                            i = this._subscriptions[data[1]].callbacks.length;\n                            while (i--) {\n                                this._subscriptions[data[1]].callbacks[i]({\n                                    details : data[3],\n                                    argsList: data[4],\n                                    argsDict: data[5]\n                                });\n                            }\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.RESULT:\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received RESULT message before session was established');\n                    } else {\n                        if (this._calls[data[1]]) {\n\n                            // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                            //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                            this._calls[data[1]].onSuccess({\n                                details : data[2],\n                                argsList: data[3],\n                                argsDict: data[4]\n                            });\n                            if (!(data[2].progress && data[2].progress === true)) {\n                                // We receive final result (progressive or not)\n                                delete this._calls[data[1]];\n                            }\n                        }\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.REGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.REGISTERED:\n                    // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received REGISTERED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                                id       : data[2],\n                                callbacks: [this._requests[data[1]].callbacks.rpc]\n                            };\n\n                            this._rpcNames.add(this._requests[data[1]].topic);\n\n                            if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.UNREGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.UNREGISTERED:\n                    // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received UNREGISTERED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            id = this._rpcRegs[this._requests[data[1]].topic].id;\n                            delete this._rpcRegs[this._requests[data[1]].topic];\n                            delete this._rpcRegs[id];\n\n                            if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                                this._rpcNames.delete(this._requests[data[1]].topic);\n                            }\n\n                            if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.INVOCATION:\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received INVOCATION message before session was established');\n                    } else {\n                        if (this._rpcRegs[data[2]]) {\n\n                            // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                            //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                            let invoke_result_handler = results => {\n                                    // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list,\n                                    // ArgumentsKw|dict)]\n                                    let msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n\n                                    if (self._isPlainObject(results)) {\n\n                                        if (self._isPlainObject(results.options)) {\n                                            msg[2] = results.options;\n                                        }\n\n                                        if (self._isArray(results.argsList)) {\n                                            msg.push(results.argsList);\n                                        } else if (typeof (results.argsList) !== 'undefined') {\n                                            msg.push([results.argsList]);\n                                        }\n\n                                        if (self._isPlainObject(results.argsDict)) {\n                                            if (msg.length === 3) {\n                                                msg.push([]);\n                                            }\n                                            msg.push(results.argsDict);\n                                        }\n                                    } else {\n                                        msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                                    }\n                                    self._send(msg);\n                                },\n                                invoke_error_handler = ({ details, error, argsList, argsDict }) => {\n                                    let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                        data[1], details || {}, error || 'wamp.error.invocation_exception'];\n\n                                    if (argsList && self._isArray(argsList)) {\n                                        msg.push(argsList);\n                                    }\n\n                                    if (argsDict && self._isPlainObject(argsDict)) {\n                                        if (msg.length === 5) {\n                                            msg.push([]);\n                                        }\n                                        msg.push(argsDict);\n                                    }\n                                    self._send(msg);\n                                };\n\n                            p = new Promise((resolve, reject) => {\n                                resolve(this._rpcRegs[data[2]].callbacks[0]({\n                                    details       : data[3],\n                                    argsList      : data[4],\n                                    argsDict      : data[5],\n                                    result_handler: invoke_result_handler,\n                                    error_handler : invoke_error_handler\n                                }));\n                            });\n\n                            p.then((results) => {\n                                invoke_result_handler(results);\n                            }).catch(e => {\n                                invoke_error_handler(e);\n                            });\n\n                        } else {\n                            // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                            this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                data[1], {}, 'wamp.error.no_such_procedure']);\n                            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION;\n                        }\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.INTERRUPT:\n                //     // WAMP SPEC:\n                //     break;\n                // case WAMP_MSG_SPEC.YIELD:\n                //     // WAMP SPEC:\n                //     break;\n                default:\n                    this._hardClose('wamp.error.protocol_violation', 'Received non-compliant WAMP message');\n                    break;\n            }\n        }, err => {\n            this._hardClose('wamp.error.protocol_violation', 'Can not decode received message');\n        });\n    }\n\n    /**\n     * Internal websocket on error callback\n     * @param {object} error\n     * @private\n     */\n    _wsOnError (error) {\n        this._log('[wampy] websocket error');\n\n        if (this._options.onError) {\n            this._options.onError({ error });\n        }\n    }\n\n    /**\n     * Reconnect to server in case of websocket error\n     * @private\n     */\n    _wsReconnect () {\n        this._log('[wampy] websocket reconnecting...');\n\n        if (this._options.onReconnect) {\n            this._options.onReconnect();\n        }\n\n        this._cache.reconnectingAttempts++;\n        this._ws = getWebSocket(this._url, this._protocols, this._options.ws,\n            this._options.additionalHeaders, this._options.wsRequestOptions);\n        this._initWsCallbacks();\n    }\n\n    /**\n     * Resubscribe to topics in case of communication error\n     * @private\n     */\n    _renewSubscriptions () {\n        let i;\n        const subs = this._subscriptions,\n            st = this._subsTopics;\n\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n\n        for (let topic of st) {\n            i = subs[topic].callbacks.length;\n            while (i--) {\n                this.subscribe(topic, subs[topic].callbacks[i], subs[topic].advancedOptions);\n            }\n        }\n    }\n\n    /**\n     * Reregister RPCs in case of communication error\n     * @private\n     */\n    _renewRegistrations () {\n        const rpcs = this._rpcRegs,\n            rn = this._rpcNames;\n\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        for (let rpcName of rn) {\n            this.register(rpcName, { rpc: rpcs[rpcName].callbacks[0] });\n        }\n    }\n\n    /* Wampy public API */\n\n    /**\n     * Get or set Wampy options\n     *\n     * To get options - call without parameters\n     * To set options - pass hash-table with options values\n     *\n     * @param {object} [opts]\n     * @returns {*}\n     */\n    options (opts) {\n        if (typeof (opts) === 'undefined') {\n            return this._options;\n        } else if (this._isPlainObject(opts)) {\n            this._options = this._merge(this._options, opts);\n            return this;\n        }\n    }\n\n    /**\n     * Get the status of last operation\n     *\n     * @returns {object} with 2 fields: code, description\n     *      code: 0 - if operation was successful\n     *      code > 0 - if error occurred\n     *      description contains details about error\n     *      reqId: last send request ID\n     */\n    getOpStatus () {\n        return this._cache.opStatus;\n    }\n\n    /**\n     * Get the WAMP Session ID\n     *\n     * @returns {string} Session ID\n     */\n    getSessionId () {\n        return this._cache.sessionId;\n    }\n\n    /**\n     * Connect to server\n     * @param {string} [url] New url (optional)\n     * @returns {Wampy}\n     */\n    connect (url) {\n        if (url) {\n            this._url = url;\n        }\n\n        if (this._options.realm) {\n\n            const authp = (this._options.authid ? 1 : 0) +\n                ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                (typeof this._options.onChallenge === 'function' ? 1 : 0);\n\n            if (authp > 0 && authp < 3) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n                return this;\n            }\n\n            this._setWsProtocols();\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws,\n                this._options.additionalHeaders, this._options.wsRequestOptions);\n            if (!this._ws) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_WS_OR_URL;\n                return this;\n            }\n            this._initWsCallbacks();\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_REALM;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disconnect from server\n     * @returns {Wampy}\n     */\n    disconnect () {\n        if (this._cache.sessionId) {\n            // need to send goodbye message to server\n            this._cache.isSayingGoodbye = true;\n            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.system_shutdown']);\n        } else if (this._ws) {\n            this._ws.close();\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Abort WAMP session establishment\n     *\n     * @returns {Wampy}\n     */\n    abort () {\n\n        if (!this._cache.sessionId && this._ws.readyState === 1) {\n            this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n            this._cache.sessionId = null;\n        }\n\n        this._ws.close();\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Subscribe to a topic on a broker\n     *\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as published event callback\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when subscribe would be confirmed\n     *                            onError: will be called if subscribe would be aborted\n     *                            onEvent: will be called on receiving published event }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { match: string matching policy (\"prefix\"|\"wildcard\") }\n     *\n     * @returns {Wampy}\n     */\n    subscribe (topicURI, callbacks, advancedOptions) {\n        let reqId, patternBased = false;\n        const options = {};\n\n        if ((typeof (advancedOptions) !== 'undefined') &&\n            (this._isPlainObject(advancedOptions)) &&\n            (advancedOptions.hasOwnProperty('match'))) {\n\n            if (/prefix|wildcard/.test(advancedOptions.match)) {\n                options.match = advancedOptions.match;\n                patternBased = true;\n            }\n        }\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: true },\n            'broker',\n            callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onEvent: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onEvent) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n            // no such subscription or processing unsubscribing\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks,\n                advancedOptions\n            };\n\n            // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n            this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, options, topicURI]);\n\n        } else {    // already have subscription to this topic\n            // There is no such callback yet\n            if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n            }\n\n            if (callbacks.onSuccess) {\n                callbacks.onSuccess();\n            }\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Unsubscribe from topic\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as\n     *                          published event callback to remove or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when unsubscribe would be confirmed\n     *                            onError: will be called if unsubscribe would be aborted\n     *                            onEvent: published event callback to remove }\n     * @returns {Wampy}\n     */\n    unsubscribe (topicURI, callbacks) {\n        let reqId, i = -1;\n\n        if (!this._preReqChecks(null, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._subscriptions[topicURI]) {\n\n            reqId = this._getReqId();\n\n            if (typeof (callbacks) === 'undefined') {\n                this._subscriptions[topicURI].callbacks = [];\n                callbacks = {};\n            } else if (typeof callbacks === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks);\n                callbacks = {};\n            } else if (callbacks.onEvent && typeof callbacks.onEvent === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent);\n            } else {\n                this._subscriptions[topicURI].callbacks = [];\n            }\n\n            if (i >= 0) {\n                this._subscriptions[topicURI].callbacks.splice(i, 1);\n            }\n\n            if (this._subscriptions[topicURI].callbacks.length) {\n                // There are another callbacks for this topic\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                return this;\n            }\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n            this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_UNSUBSCRIBE;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Publish a event to topic\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - can be either a value of any type or null.  Also it\n     *                          is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {object} [callbacks] - optional hash table of callbacks:\n     *                          { onSuccess: will be called when publishing would be confirmed\n     *                            onError: will be called if publishing would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n     *                                      even though they may be subscribed\n     *                            exclude_authid: string|array Authentication id(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            exclude_authrole: string|array Authentication role(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            eligible: integer|array WAMP session id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authid: string|array Authentication id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authrole: string|array Authentication role(s) that are allowed\n     *                                      to receive a published event\n     *                            exclude_me: bool flag of receiving publishing event by initiator\n     *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n     *                                      to receivers of a published event }\n     * @returns {Wampy}\n     */\n    publish (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false, hasPayload = false;\n        const options = {},\n            _optionsConvertHelper = (option, sourceType) => {\n                if (advancedOptions[option]) {\n                    if (this._isArray(advancedOptions[option]) && advancedOptions[option].length) {\n                        options[option] = advancedOptions[option];\n                    } else if (typeof advancedOptions[option] === sourceType) {\n                        options[option] = [advancedOptions[option]];\n                    } else {\n                        err = true;\n                    }\n                }\n            };\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._isPlainObject(callbacks)) {\n            options.acknowledge = true;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                _optionsConvertHelper('exclude', 'number');\n                _optionsConvertHelper('exclude_authid', 'string');\n                _optionsConvertHelper('exclude_authrole', 'string');\n                _optionsConvertHelper('eligible', 'number');\n                _optionsConvertHelper('eligible_authid', 'string');\n                _optionsConvertHelper('eligible_authrole', 'string');\n\n                if (advancedOptions.hasOwnProperty('exclude_me')) {\n                    options.exclude_me = advancedOptions.exclude_me !== false;\n                }\n\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        reqId = this._getReqId();\n\n        switch (arguments.length) {\n            case 1:\n                break;\n            case 2:\n                hasPayload = true;\n                break;\n            default:\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks\n                };\n                hasPayload = true;\n                break;\n        }\n\n        // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n\n        if (hasPayload) {\n            // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n            if (this._isArray(payload)) {\n                msg.push(payload);\n            } else if (this._isPlainObject(payload)) {\n                // It's a wampy unified form of payload passing\n                if (payload.argsList || payload.argsDict) {\n                    if (payload.argsList) {\n                        msg.push(payload.argsList);\n                    }\n\n                    if (payload.argsDict) {\n                        if (msg.length === 4) {\n                            msg.push([]);\n                        }\n                        msg.push(payload.argsDict);\n                    }\n                } else {\n                    msg.push([], payload);\n                }\n            } else {    // assume it's a single value\n                msg.push([payload]);\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Remote Procedure Call\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - can be either a value of any type or null.  Also it\n     *                          is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {function|object} callbacks - if it is a function - it will be treated as result callback function\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called with result on successful call\n     *                            onError: will be called if invocation would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { disclose_me: bool flag of disclosure of Caller identity (WAMP session ID)\n     *                                  to endpoints of a routed call\n     *                            receive_progress: bool flag for receiving progressive results. In this case\n     *                                  onSuccess function will be called every time on receiving result\n     *                            timeout: integer timeout (in ms) for the call to finish }\n     * @returns {Wampy}\n     */\n    call (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false;\n        const options = {};\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: true }, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onSuccess) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('receive_progress')) {\n                    options.receive_progress = advancedOptions.receive_progress === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('timeout')) {\n                    if (typeof advancedOptions.timeout === 'number') {\n                        options.timeout = advancedOptions.timeout;\n                    } else {\n                        err = true;\n                    }\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        do {\n            reqId = this._getReqId();\n        } while (reqId in this._calls);\n\n        this._calls[reqId] = callbacks;\n\n        // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n        msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n\n        if (payload !== null && typeof (payload) !== 'undefined') {\n            if (this._isArray(payload)) {\n                msg.push(payload);\n            } else if (this._isPlainObject(payload)) {\n                // It's a wampy unified form of payload passing\n                if (payload.argsList || payload.argsDict) {\n                    if (payload.argsList) {\n                        msg.push(payload.argsList);\n                    }\n\n                    if (payload.argsDict) {\n                        if (msg.length === 4) {\n                            msg.push([]);\n                        }\n                        msg.push(payload.argsDict);\n                    }\n                } else {\n                    msg.push([], payload);\n                }\n            } else {    // assume it's a single value\n                msg.push([payload]);\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * RPC invocation cancelling\n     *\n     * @param {int} reqId RPC call request ID\n     * @param {function|object} callbacks - if it is a function - it will be called if successfully\n     *                          sent canceling message or it can be hash table of callbacks:\n     *                          { onSuccess: will be called if successfully sent canceling message\n     *                            onError: will be called if some error occurred }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { mode: string|one of the possible modes:\n     *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n     *                          }\n     *\n     * @returns {Wampy}\n     */\n    cancel (reqId, callbacks, advancedOptions) {\n        let err = false;\n        const options = {};\n\n        if (!this._preReqChecks(null, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (!reqId || !this._calls[reqId]) {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_REQ_ID;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n\n                if (advancedOptions.hasOwnProperty('mode')) {\n                    if (/skip|kill|killnowait/.test(advancedOptions.mode)) {\n                        options.mode = advancedOptions.mode;\n                    } else {\n                        err = true;\n                    }\n\n                }\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n        this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n\n        callbacks.onSuccess && callbacks.onSuccess();\n\n        return this;\n    }\n\n    /**\n     * RPC registration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as rpc itself\n     *                          or it can be hash table of callbacks:\n     *                          { rpc: registered procedure\n     *                            onSuccess: will be called on successful registration\n     *                            onError: will be called if registration would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          {\n     *                              match: string matching policy (\"prefix\"|\"wildcard\")\n     *                              invoke: string invocation policy (\"single\"|\"roundrobin\"|\"random\"|\"first\"|\"last\")\n     *                          }\n     * @returns {Wampy}\n     */\n    register (topicURI, callbacks, advancedOptions) {\n        let reqId, patternBased = false, err = false;\n        const options = {};\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n\n                if (advancedOptions.hasOwnProperty('match')) {\n                    if (/prefix|wildcard/.test(advancedOptions.match)) {\n                        options.match = advancedOptions.match;\n                        patternBased = true;\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.hasOwnProperty('invoke')) {\n                    if (/single|roundrobin|random|first|last/.test(advancedOptions.invoke)) {\n                        options.invoke = advancedOptions.invoke;\n                    } else {\n                        err = true;\n                    }\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: false },\n            'dealer',\n            callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { rpc: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.rpc) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n            // no such registration or processing unregistering\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n            this._send([WAMP_MSG_SPEC.REGISTER, reqId, options, topicURI]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // already have registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.RPC_ALREADY_REGISTERED;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n        }\n\n        return this;\n\n    }\n\n    /**\n     * RPC unregistration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function, it will be called on successful unregistration\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called on successful unregistration\n     *                            onError: will be called if unregistration would be aborted }\n     * @returns {Wampy}\n     */\n    unregister (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        }\n\n        if (this._rpcRegs[topicURI]) {   // there is such registration\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n            this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // there is no registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_UNREG;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n        }\n\n        return this;\n    }\n}\n\nexport default Wampy;\nexport { Wampy };\n"],"file":"wampy.js"}